<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Api on Juliano Marcon</title>
    <link>https://jmarcon.github.io/tags/api/</link>
    <description>RSS in Api on Juliano Marcon</description>
    <generator>Juliano Marcon</generator>
    <language>pt-br</language>
    <managingEditor>contato@julianomarcon.com.br (Juliano Marcon)</managingEditor>
    <webMaster>contato@julianomarcon.com.br (Juliano Marcon)</webMaster>
    <lastBuildDate>Tue, 22 Mar 2016 17:19:31 -0300</lastBuildDate>
    <atom:link href="https://jmarcon.github.io/tags/api/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Node e Cassandra - Parte 3 : Criando uma API Simples</title>
      <link>https://jmarcon.github.io/post/20160322-node-e-cassandra-parte3-criando-uma-api-simples/</link>
      <pubDate>Tue, 22 Mar 2016 17:19:31 -0500</pubDate>
      <author>contato@julianomarcon.com.br (Juliano Marcon)</author>
      <guid>https://jmarcon.github.io/post/20160322-node-e-cassandra-parte3-criando-uma-api-simples/</guid>
      <description>
        <![CDATA[
          <img src="https://jmarcon.github.io/images/post/nodejs.jpg" alt="nodejs.jpg" />
          &lt;p&gt;Este é o terceiro e último de três posts sobre como criar uma API utilizando o
&lt;a href=&#34;https://nodejs.org&#34;&gt;NodeJS&lt;/a&gt; e o &lt;a href=&#34;https://cassandra.apache.org&#34;&gt;Apache Cassandra&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Nos posts anteriores deixamos o ambiente parcialmente preparado e criamos a
base de dados que usaremos no cassandra.&lt;/p&gt;

&lt;p&gt;Então vamos criar a aplicação dentro da pasta&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;cassandra_node &amp;gt; node &amp;gt; api&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Vamos criar nosso arquivo &lt;strong&gt;package.json&lt;/strong&gt; que definirá nossa aplicação e suas
dependências com o seguinte conteúdo.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  &amp;quot;name&amp;quot; : &amp;quot;node-api-demo&amp;quot;,
  &amp;quot;main&amp;quot; : &amp;quot;server.js&amp;quot;,
  &amp;quot;dependencies&amp;quot; : {
    &amp;quot;express&amp;quot; : &amp;quot;~4.9.0&amp;quot;,
    &amp;quot;body-parser&amp;quot; : &amp;quot;~1.8.1&amp;quot;,
    &amp;quot;async&amp;quot; : &amp;quot;1.5.2&amp;quot;,
    &amp;quot;cassandra-driver&amp;quot; : &amp;quot;~3.0.1&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inicie um arquivo &lt;strong&gt;server.js&lt;/strong&gt; e insira o conteúdo abaixo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var cassandra  = require(&#39;cassandra-driver&#39;);
var express    = require(&#39;express&#39;);
var app        = express();
var bodyParser = require(&#39;body-parser&#39;);

// Configurar o App para usar o body-parser
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

// Definindo a porta padrão (Lembre do docker-compose.yml)
var port = process.env.PORT || 3000;

// Criando nosso cliente de conexão.
var client = new cassandra.Client({
  contactPoints: [&#39;192.168.99.100&#39;],
  keyspace: &#39;demo&#39;
});

// Conectando no banco de dados
client.connect(function(err) {
  console.log(err);
});


// Definindo a rotas para nossa API
var router = express.Router();

router.get(&#39;/&#39;, function(req, res) {
  res.json({ message: &#39;Wohooo!!! Bem vindo a nossa API&#39; });
});

router.post(&#39;/login&#39;, function(req, res) {
  var email = req.body.email;
  var pass = req.body.password;

  client.execute(
    &amp;quot;SELECT email, password FROM users &amp;quot; +
    &amp;quot;WHERE email = &#39;&amp;quot; + email + &amp;quot;&#39;&amp;quot;,
    function(err, result) {
      if (err)
        res.send(err);

      var user = result.rows[0];
      if (user == null) {
        res.json({ message: &#39;Usuário ou senha inválidos &#39; });
      }
      else if (user.password != pass) {
        //Se tentar executar um WHERE diretamente no Cassandra ele apresentará
        //um erro. Não criamos um índice para a coluna password.
        res.json({ message: &#39;Usuário ou senha inválidos &#39; });
      }
      else {
        res.json({ message: user.email });
      }
    });
});

router.post(&#39;/register&#39;, function(req, res) {
  var email = req.body.email;
  var pass = req.body.password;
  var params = [email, pass];

  client.execute(
    &amp;quot;INSERT INTO users (email, password) values (?, ?)&amp;quot;, params, function(err) {
      if (err)
        res.send(err);

      res.json({ message: &amp;quot;Cadastrado com sucesso!&amp;quot; });
    }
  );
});

router.get(&#39;/first&#39;, function(req, res) {
  client.execute(
    &amp;quot;SELECT email, password FROM users LIMIT 1&amp;quot;,
    function(err, result) {
      if (err)
        res.send(err);

      var user = result.rows[0];
      if (user == null) {
        res.json({ message: &#39;Nenhum encontrado &#39; });
      } else {
        res.json({ message: user.email });
      }
    });
});

//Registrar nossas rotas com um prefixo api
app.use(&#39;/api&#39;, router);


//Iniciando o servidor
app.listen(port);

console.log(&#39;A Mágica acontece na porta &#39; + port);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para que a aplicação node seja iniciada, vamos criar o arquivo &lt;strong&gt;start.sh&lt;/strong&gt; na pasta
api (junto com o &lt;em&gt;server.js&lt;/em&gt;) com o conteúdo abaixo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!\bin\bash

#Instalar as dependências
npm install

#Iniciar a aplicação pelo packages.json
npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Assim, vamos iniciar também nossa maquina docker com o comando:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up -d nodejs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Utilize um utilitário como o &lt;a href=&#34;https://www.getpostman.com/&#34;&gt;Postman&lt;/a&gt; ou o
&lt;a href=&#34;http://www.telerik.com/fiddler&#34;&gt;Fiddler&lt;/a&gt; para fazer chamadas na sua API nos
endereços:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://192.168.99.100:3000/api/&#34;&gt;http://192.168.99.100:3000/api/&lt;/a&gt; (GET)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://192.168.99.100:3000/api/first&#34;&gt;http://192.168.99.100:3000/api/first&lt;/a&gt; (GET)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://192.168.99.100:3000/api/register&#34;&gt;http://192.168.99.100:3000/api/register&lt;/a&gt; (POST)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://192.168.99.100:3000/api/login&#34;&gt;http://192.168.99.100:3000/api/login&lt;/a&gt; (POST)&lt;/li&gt;
&lt;/ul&gt;

        ]]>
      </description>
    </item>
    
  </channel>
</rss>
