<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Api on Juliano Marcon</title>
    <link>https://jmarcon.github.io/tags/api/</link>
    <description>RSS in Api on Juliano Marcon</description>
    <generator>Juliano Marcon</generator>
    <language>pt-br</language>
    <managingEditor>contato@julianomarcon.com.br (Juliano Marcon)</managingEditor>
    <webMaster>contato@julianomarcon.com.br (Juliano Marcon)</webMaster>
    <lastBuildDate>Tue, 22 Mar 2016 17:19:31 -0300</lastBuildDate>
    <atom:link href="https://jmarcon.github.io/tags/api/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Node e Cassandra - Parte 3 : Criando uma API Simples</title>
      <link>https://jmarcon.github.io/post/20160322-node-e-cassandra-parte3-criando-uma-api-simples/</link>
      <pubDate>Tue, 22 Mar 2016 17:19:31 -0500</pubDate>
      <author>contato@julianomarcon.com.br (Juliano Marcon)</author>
      <guid>https://jmarcon.github.io/post/20160322-node-e-cassandra-parte3-criando-uma-api-simples/</guid>
      <description>
        <![CDATA[<img src="https://jmarcon.github.io/images/post/nodejs.jpg" alt="nodejs.jpg" />
          <p>Este é o terceiro e último de três posts sobre como criar uma API utilizando o
<a href="https://nodejs.org">NodeJS</a> e o <a href="https://cassandra.apache.org">Apache Cassandra</a>.</p>

<p>Nos posts anteriores deixamos o ambiente parcialmente preparado e criamos a
base de dados que usaremos no cassandra.</p>

<p>Então vamos criar a aplicação dentro da pasta</p>

<blockquote>
<p><strong>cassandra_node &gt; node &gt; api</strong></p>
</blockquote>

<p>Vamos criar nosso arquivo <strong>package.json</strong> que definirá nossa aplicação e suas
dependências com o seguinte conteúdo.</p>

<pre><code class="language-javascript">{
  &quot;name&quot; : &quot;node-api-demo&quot;,
  &quot;main&quot; : &quot;server.js&quot;,
  &quot;dependencies&quot; : {
    &quot;express&quot; : &quot;~4.9.0&quot;,
    &quot;body-parser&quot; : &quot;~1.8.1&quot;,
    &quot;async&quot; : &quot;1.5.2&quot;,
    &quot;cassandra-driver&quot; : &quot;~3.0.1&quot;
  }
}
</code></pre>

<p>Inicie um arquivo <strong>server.js</strong> e insira o conteúdo abaixo:</p>

<pre><code class="language-javascript">var cassandra  = require('cassandra-driver');
var express    = require('express');
var app        = express();
var bodyParser = require('body-parser');

// Configurar o App para usar o body-parser
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

// Definindo a porta padrão (Lembre do docker-compose.yml)
var port = process.env.PORT || 3000;

// Criando nosso cliente de conexão.
var client = new cassandra.Client({
  contactPoints: ['192.168.99.100'],
  keyspace: 'demo'
});

// Conectando no banco de dados
client.connect(function(err) {
  console.log(err);
});


// Definindo a rotas para nossa API
var router = express.Router();

router.get('/', function(req, res) {
  res.json({ message: 'Wohooo!!! Bem vindo a nossa API' });
});

router.post('/login', function(req, res) {
  var email = req.body.email;
  var pass = req.body.password;

  client.execute(
    &quot;SELECT email, password FROM users &quot; +
    &quot;WHERE email = '&quot; + email + &quot;'&quot;,
    function(err, result) {
      if (err)
        res.send(err);

      var user = result.rows[0];
      if (user == null) {
        res.json({ message: 'Usuário ou senha inválidos ' });
      }
      else if (user.password != pass) {
        //Se tentar executar um WHERE diretamente no Cassandra ele apresentará
        //um erro. Não criamos um índice para a coluna password.
        res.json({ message: 'Usuário ou senha inválidos ' });
      }
      else {
        res.json({ message: user.email });
      }
    });
});

router.post('/register', function(req, res) {
  var email = req.body.email;
  var pass = req.body.password;
  var params = [email, pass];

  client.execute(
    &quot;INSERT INTO users (email, password) values (?, ?)&quot;, params, function(err) {
      if (err)
        res.send(err);

      res.json({ message: &quot;Cadastrado com sucesso!&quot; });
    }
  );
});

router.get('/first', function(req, res) {
  client.execute(
    &quot;SELECT email, password FROM users LIMIT 1&quot;,
    function(err, result) {
      if (err)
        res.send(err);

      var user = result.rows[0];
      if (user == null) {
        res.json({ message: 'Nenhum encontrado ' });
      } else {
        res.json({ message: user.email });
      }
    });
});

//Registrar nossas rotas com um prefixo api
app.use('/api', router);


//Iniciando o servidor
app.listen(port);

console.log('A Mágica acontece na porta ' + port);

</code></pre>

<p>Para que a aplicação node seja iniciada, vamos criar o arquivo <strong>start.sh</strong> na pasta
api (junto com o <em>server.js</em>) com o conteúdo abaixo:</p>

<pre><code class="language-bash">#!\bin\bash

#Instalar as dependências
npm install

#Iniciar a aplicação pelo packages.json
npm start
</code></pre>

<p>Assim, vamos iniciar também nossa maquina docker com o comando:</p>

<pre><code class="language-bash">docker-compose up -d nodejs
</code></pre>

<p>Utilize um utilitário como o <a href="https://www.getpostman.com/">Postman</a> ou o
<a href="http://www.telerik.com/fiddler">Fiddler</a> para fazer chamadas na sua API nos
endereços:</p>

<ul>
<li><a href="http://192.168.99.100:3000/api/">http://192.168.99.100:3000/api/</a> (GET)</li>
<li><a href="http://192.168.99.100:3000/api/first">http://192.168.99.100:3000/api/first</a> (GET)</li>
<li><a href="http://192.168.99.100:3000/api/register">http://192.168.99.100:3000/api/register</a> (POST)</li>
<li><a href="http://192.168.99.100:3000/api/login">http://192.168.99.100:3000/api/login</a> (POST)</li>
</ul>

        ]]>
      </description>
    </item>
    
  </channel>
</rss>