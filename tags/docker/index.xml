<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Juliano Marcon</title>
    <link>https://jmarcon.github.io/tags/docker/</link>
    <description>RSS in Docker on Juliano Marcon</description>
    <generator>Juliano Marcon</generator>
    <language>pt-br</language>
    <managingEditor>contato@julianomarcon.com.br (Juliano Marcon)</managingEditor>
    <webMaster>contato@julianomarcon.com.br (Juliano Marcon)</webMaster>
    <lastBuildDate>Sun, 20 Mar 2016 17:19:02 -0300</lastBuildDate>
    <atom:link href="https://jmarcon.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Node e Cassandra - Parte 1 : Ambiente</title>
      <link>https://jmarcon.github.io/post/20160320-node-e-cassandra-parte1-ambiente/</link>
      <pubDate>Sun, 20 Mar 2016 17:19:02 -0500</pubDate>
      <author>contato@julianomarcon.com.br (Juliano Marcon)</author>
      <guid>https://jmarcon.github.io/post/20160320-node-e-cassandra-parte1-ambiente/</guid>
      <description>
        <![CDATA[
          <img src="https://jmarcon.github.io/images/post/docker.png" alt="docker.png" />
          

&lt;p&gt;Este é o primeiro de três posts sobre como criar uma API utilizando o
&lt;a href=&#34;https://nodejs.org&#34;&gt;NodeJS&lt;/a&gt; e o &lt;a href=&#34;https://cassandra.apache.org&#34;&gt;Apache Cassandra&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Vejo uma grande parte dos textos falando sobre a dupla de NodeJS com o
&lt;a href=&#34;https://www.mongodb.org&#34;&gt;MongoDB&lt;/a&gt;. Mas o Cassandra pode ser uma alternativa para
alguns tipos de aplicações que demandam outros níveis de acessos de escrita e
leitura.&lt;/p&gt;

&lt;h3 id=&#34;instalando-o-ambiente:2d07405689eed99118c9470fa868ed61&#34;&gt;Instalando o ambiente.&lt;/h3&gt;

&lt;p&gt;Primeiro, estou utilizando o OSX mas, provavelmente, você terá pouco trabalho
para adaptar o que vamos ter aqui para outros sistemas.&lt;/p&gt;

&lt;p&gt;Para abstrair um pouco vamos utilizar o &lt;a href=&#34;http://www.docker.com&#34;&gt;Docker&lt;/a&gt; e deixar
um pouco mais automático com o recurso &amp;ldquo;docker-compose&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;No OSX e no Windows, o pessoal do Docker adquiriu o
&lt;a href=&#34;https://www.kitematic.com&#34;&gt;Kitematic&lt;/a&gt; que após instalado vai lhe fornecer
todos os requisitos necessários para criar nosso ambiente.&lt;/p&gt;

&lt;h4 id=&#34;preparando-os-arquivos:2d07405689eed99118c9470fa868ed61&#34;&gt;Preparando os arquivos&lt;/h4&gt;

&lt;p&gt;Vamos começar simplesmente criando uma arvore de diretórios que vai nos apoiar
nesse projeto.&lt;/p&gt;

&lt;p&gt;Crie a seguinte estrutura na sua maquina:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;[cassandra_docker]
  [cassandra]
  [node]
    [api]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;criando-a-maquina-do-cassandra:2d07405689eed99118c9470fa868ed61&#34;&gt;Criando a maquina do Cassandra&lt;/h4&gt;

&lt;p&gt;Dentro da pasta do cassandra vamos criar o arquivo de nome &lt;strong&gt;Dockerfile&lt;/strong&gt; que vai
informar ao docker como criar a maquina.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Partir do docker inicial do cassandra no DockerHub
FROM cassandra:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bem simples!&lt;/p&gt;

&lt;h4 id=&#34;criando-a-maquina-do-nodejs:2d07405689eed99118c9470fa868ed61&#34;&gt;Criando a maquina do NodeJS&lt;/h4&gt;

&lt;p&gt;Dentro da pasta node crie mais um arquivo com o node de &lt;strong&gt;Dockerfile&lt;/strong&gt; para
configurar o docker que vai rodar o node.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Partir do docker inicial do node do DockerHub
FROM node:latest

# Criar a pasta onde a aplicação vai rodar
RUN mkdir /api

# Definir a pasta criada como a pasta de trabalho
WORKDIR /api

# Executar a instalação das dependecias
ENTRYPOINT [&amp;quot;/bin/bash&amp;quot;, &amp;quot;start.sh&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Os arquivos da aplicação serão criados durante o ultimo POST desta série. Mas vamos
deixar algo preparado aqui.&lt;/p&gt;

&lt;h4 id=&#34;configurando-a-composição:2d07405689eed99118c9470fa868ed61&#34;&gt;Configurando a composição&lt;/h4&gt;

&lt;p&gt;Crie na pasta raiz (cassandra_docker) um arquivo com o nome &amp;ldquo;docker-compose.yml&amp;rdquo;
que vai receber a configuração detalhada de como o dockers vão ser criados e
como eles vão se conectar.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;cassandra:
  build: ./cassandra
  expose:
    - &amp;quot;27017&amp;quot;
  ports:
  - &amp;quot;7199:7199&amp;quot;
  - &amp;quot;7000:7000&amp;quot;
  - &amp;quot;7001:7001&amp;quot;
  - &amp;quot;9160:9160&amp;quot;
  - &amp;quot;9042:9042&amp;quot;

nodejs:
  build: ./node
  volumes:
    - &amp;quot;./node/api:/api&amp;quot;
  expose:
    - &amp;quot;3000&amp;quot;
  ports:
    - &amp;quot;3000:3000&amp;quot;
  links:
    - &amp;quot;cassandra:cassandra&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;iniciando-as-maquinas:2d07405689eed99118c9470fa868ed61&#34;&gt;Iniciando as maquinas&lt;/h3&gt;

&lt;p&gt;Execute o comando abaixo e aguarde a maquina do cassandra subir:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up -d cassandra
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;É possível iniciar o Kitematic e ver as maquinas criadas. Apenas a maquina do
cassandra estará rodando e estará acessível pelo endereço 192.168.99.100:27017 se
quiser utilizar uma GUI para acessar o banco.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;O IP &lt;strong&gt;&lt;em&gt;192.168.99.100&lt;/em&gt;&lt;/strong&gt; é atribuído para a maquina virtual (virtualbox) criada como
docker-machine pelo Kitematic.&lt;/p&gt;
&lt;/blockquote&gt;

        ]]>
      </description>
    </item>
    
  </channel>
</rss>
