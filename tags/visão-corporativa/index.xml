<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Visão Corporativa on JULIANO MARCON</title>
    <link>https://jmarcon.github.io/tags/vis%C3%A3o-corporativa/index.xml</link>
    <description>RSS in Visão Corporativa on JULIANO MARCON</description>
    <generator>Juliano Marcon</generator>
    <language>pt-br</language>
    <managingEditor>contato@julianomarcon.com.br (Juliano Marcon)</managingEditor>
    <webMaster>contato@julianomarcon.com.br (Juliano Marcon)</webMaster>
    <atom:link href="/tags/vis%C3%A3o-corporativa/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>O Débito Técnico das Empresas Projetizadas</title>
      <link>https://jmarcon.github.io/post/20160424-o-debito-tecnico-das-empresas-projetizadas/</link>
      <pubDate>Sun, 24 Apr 2016 11:36:41 -1100</pubDate>
      <author>contato@julianomarcon.com.br (Juliano Marcon)</author>
      <guid>https://jmarcon.github.io/post/20160424-o-debito-tecnico-das-empresas-projetizadas/</guid>
      <description>
        <![CDATA[<img src="https://jmarcon.github.io/images/post/debito_tecnico.jpg" alt="debito_tecnico.jpg" />
          <p>Durante o desenvolvimento de qualquer projeto, atalhos são tomados. O motivo? Vamos fazê-lo para entregar mais rápido. Só dessa vez.</p>

<p>O débito técnico se acumula e, pouco a pouco, o código do produto é corrompido. Ninguém vai se importar com isso por muito tempo, mas, eventualmente alguém terá que se lidar com isso e, provavelmente, será você.</p>

<p></p>

<p>Isso é algo que ocorre em todo projeto e a concorrência faz a mesma coisa para lançar novos recursos mais rápido.</p>

<p>Sabendo disso, como pagar os débitos? O primeiro passo é: Torne os problemas visíveis. Como?</p>

<h2 id="monitore-monitore-e-monitore">Monitore, monitore e monitore</h2>

<p>Compartilhe a informação dos problemas enfrentados por sua aplicação, performance, hardware, bugs e erros com a empresa. Se possível, com o cliente.</p>

<p>Os mais conservadores dirão: &ldquo;Minha nossa! Mas assim os stakeholders vão ver que temos problemas!&rdquo;. <strong>Exato!</strong> O investimento em projetos com foco em entrega da melhoria dos ambientes e evolução de código sem criar funcionalidades precisam de um motivador e apoio dos que aprovam os esforços dos times.</p>

<p>Lógico que não deve existir dúvidas que foi feito o melhor para entregar os resulados mais rapidamente durante os projetos mas que o investimento em qualidade é essencial para a continuidade do negócio.</p>

<p>A monitoração vai proporcionar um conjunto de dados que vai sensibilizar a todos sobre quais pontos são mais críticos. Contra dados não há argumentos.</p>

<p>Aprove o projeto com foco em resolver o que dói mais para a empresa e para os clientes. As informações obtidas da supervisão constante das informações de comportamento das aplicações permitem escolher o escopo do projeto com foco na entrega de maior valor para seu cliente.</p>

<h2 id="trabalhe-os-valores-da-equipe">Trabalhe os valores da equipe</h2>

<p>O código dos produtos é um bem valioso para a empresa. Mas são as pessoas que os constroem e modificam. Elas são seu bem mais precioso e seus valores vão ditar a qualidade com que os produtos serão tratados. A qualidade se origina dos valores.</p>

<h4 id="você-precisa-se-importar">Você precisa se importar</h4>

<p>Não faz sentido querer que as pessoas se importem com a qualidade do código se você não se importar. O exemplo é o maior motivador.</p>

<p>O foco em resultado muitas vezes ofusca o valor da qualidade do código.</p>

<h4 id="seu-time-precisa-se-importar">Seu time precisa se importar</h4>

<p>As pessoas que trabalham com o código dos produtos tem que enxergar o valor agregado que estão entregando. Cada novo produto, modificação ou funcionalidade vai gerar impacto na vida de diversas pessoas.</p>

<p>Mesmo que eles tenham a dificuldade de enxergar valor na entrega, a qualidade do código vai impactar diretamente seus companheiros de equipe, os futuros funcionários e toda a cadeia de trabalho de software.</p>

<h4 id="disciplina-é-a-essência">Disciplina é a essência</h4>

<p>Uma vez que você (ou alguém do seu time) comece procrastinar sobre a qualidade, será muito difícil parar de deixar as coisas de lado. É um cuidado constante de todos.</p>

<h4 id="ritmo-constante">Ritmo constante</h4>

<p>Lembre-se do ditado: <em>o ótimo é inimigo do bom</em>. Progredir na qualidade é mais importante do que atingir a perfeição.</p>

<h4 id="pequenas-vitórias-são-importantes">Pequenas vitórias são importantes</h4>

<p>Quando o time começar a produzir partes de código realmente bons, isso vai induzir a melhorar as outras partes também. Uma conquista leva até outra e, consequentemente, gera tração.</p>

<h2 id="mostre-resultado">Mostre resultado</h2>

<p>Utilize os dados de monitoração com antes e depois de cada evento importante para o produto, como o lançamento de novas funcionalidades, uma ação de marketing ou a implantação de suas melhorias de qualidade.</p>

<p>Compartilhe com todos as vitórias e tente fomentar ações de <a href="https://jmarcon.github.io/post/20160420-sobre-refactoring/">refactoring</a> durante o desenvolvimento do software. Os projetos específicos de qualidade não vão desaparecer, mas vão diminuir com o tempo.</p>
        ]]>
      </description>
    </item>
    
    <item>
      <title>Sobre TDD e Refactoring</title>
      <link>https://jmarcon.github.io/post/20160420-sobre-refactoring/</link>
      <pubDate>Wed, 20 Apr 2016 17:48:35 -0500</pubDate>
      <author>contato@julianomarcon.com.br (Juliano Marcon)</author>
      <guid>https://jmarcon.github.io/post/20160420-sobre-refactoring/</guid>
      <description>
        <![CDATA[<img src="https://jmarcon.github.io/images/post/tdd.jpg" alt="tdd.jpg" />
          <p>A preocupação diária com a qualidade dos código construídos nas empresas que desenvolvem software, próprios ou para terceiros, estão fomentando a prática de técnicas como o TDD.</p>

<p>Os times tem espaço para aprender e aplicar essa técnica? Será que as empresas realmente sabem o que significa isso?</p>

<p></p>

<h3 id="o-que-é-tdd">O que é TDD?</h3>

<p><a href="https://pt.wikipedia.org/wiki/Test_Driven_Development">Test Driven Development (TDD)</a>, ou em tradução livre, Desenvolvimento Orientado a Testes é uma metodologia com foco em converter as necessidades de negócios em testes computacionais para, em seguida, escrever um trecho de código que passe no teste e, finalmente, executar o Refactoring dos programas.</p>

<p>Busca-se um código de qualidade, funcionando e testado, através da repetição contínua do ciclo apresentado acima.</p>

<h3 id="o-que-é-refactoring">O que é Refactoring?</h3>

<p>É a prática de reescrever códigos sem alterar sua funcionalidade evoluindo suas características não funcionais. Executar de forma contínua pequenos procedimentos de refactoring produz uma reestruturação significativa no projeto.</p>

<p><img src="/images/post/qualidade.png" alt="Qualidade" style="max-width:200px; float:left; margin:10px;" /></p>

<p>O passo de Refactoring é o que garante a qualidade e performance do código escrito e, portanto, o procedimento mais impactado pelo triângulo da qualidade.</p>

<p>Durante o levantamento de projetos e seu planejamento, as principais informações que são avaliadas pelos stakeholders são os lados desse triângulo, e tentam ao máximo reduzir o custo e o tempo sempre tentando incluir o máximo de escopo.</p>

<p>Mesmo que a grande maioria dos gestores de projeto conheça essa tríplice, quando se trata de software, a espectativa deles é que a qualidade seja garantida pela equipe de desenvolvimento. Desta formar, a qualidade é a primeira que sofre impactos quando o cronograma precisa ser reduzido sem perder as funcionalidades pedidas pelo cliente.</p>

<p>Isso seria um comportamento aceitável em circunstâncias onde exista flexibilidade para rever o código posteriormente. Mas&hellip; Projetos devem ter começo e fim. A solução seria criar um novo projeto para resolver as falhas futuras, mas é difícil defender o lucro em um projeto assim. Tento apresentar uma sugestão para lidar com essa situação em <a href="https://jmarcon.github.io/post/20160424-o-debito-tecnico-das-empresas-projetizadas/">outro artigo</a>.</p>

<p>Ao final, considerado entregue, um produto sai da fila de prioridades da empresa e novos projetos começam a ser estudados.</p>

<h3 id="como-manter-a-qualidade">Como manter a qualidade?</h3>

<p>A janela da situação do projeto continuará sendo um cronograma, mas não apenas é possível apresentar as necessidades e os benefícios de investir na qualidade durante o desenvolvimento, como é simples demonstrar o valor agregado nessas ações.</p>

<h5 id="qualidade-faz-parte-do-escopo">Qualidade faz parte do escopo:</h5>

<p>Apesar de improvável, o levantamento inicial deveria considerar os requisitos não funcionais como parte do escopo e o tempo de refactoring necessário para garantir a qualidade do código.</p>

<p>Esses tempo deve ser defendido no projeto como risco operacional futuro e dependências para a continuidade do negócio.</p>

<p>Em times ágeis, a participação de um arquiteto e o auto aprendizado do time causa um senso de responsabilidade pelo produto que força as pessoas a considerar o refactoring no momento da definição do escopo das atividades.</p>

<h5 id="equipes-de-qualidade-que-entendem-do-código">Equipes de qualidade que entendem do código:</h5>

<p>Definir uma equipe de revisão de código constante e responsável pela arquitetura e requisitos não funcionais de cada projeto.</p>

<p>Essas equipes poderiam ser divididas por linha de negócios ou produto e deveriam não apenas fomentar os refactorings antes da entrega das funcionaldiades mas também acompanhar o desenvolvimento de perto.</p>

<p>É uma prática comum para escalar os times ágeis ter um time de arquitetura responsável por um conjunto de produtos e funcionalidades apoiando os times de desenvolvimento.</p>

<h5 id="definir-o-que-testar">Definir o que testar:</h5>

<p>Ter absolutamente tudo com testes é algo muito caro e, provavelmente, o custo envolvido supera os benefícios.</p>

<p>Um código 100% testado pode parecer um sonho para muitos desenvolvedores e entusiastas do TDD, mas é fato que para ter esse nível de qualidade, muito tempo e dinheiro devem ser investidos.</p>

<p>É preciso ponderar se os testes estão realmente agregando valor para a empresa, pois pode ocorrer que o custo de manutenção do teste supere os custos de manutenção do código.</p>

<p>Definir uma porcentagem de cobertura dos testes pode ajudar flexibilizar o esforço, mas isso pode impactar como as pessoas escrevem os testes e os desenvolvedores podem acabar focando em escrever os testes mais simples e deixar as rotinas mais complexas descobertas. Isso é o oposto de agregar valor.</p>

<p>Portanto, neste caso, o time deve ser guiado e evoluir para conseguir criar uma consciência comum sobre a relevância do teste, a visão da equipe de negócios sobre a funcionalidade e a percepção dos programas que possuem dependências de outros trechos de código e que podem ser impactados facilmente por alterações futuras.</p>

<h5 id="acompanhe">Acompanhe:</h5>

<p>Use algumas métricas para acompanhar a evolução da qualidade de seu código, como a quantidade de defeitos encontrados após a entrega, a melhora da velocidade da aplicação ou a diminuição das reclamações dos clientes.</p>
        ]]>
      </description>
    </item>
    
    <item>
      <title>Como ser um desenvolvedor melhor</title>
      <link>https://jmarcon.github.io/post/20160418-como-ser-um-desenvolvedor-melhor/</link>
      <pubDate>Mon, 18 Apr 2016 17:53:07 -0500</pubDate>
      <author>contato@julianomarcon.com.br (Juliano Marcon)</author>
      <guid>https://jmarcon.github.io/post/20160418-como-ser-um-desenvolvedor-melhor/</guid>
      <description>
        <![CDATA[<img src="https://jmarcon.github.io/images/post/soft-skills.jpg" alt="soft-skills.jpg" />
          <p>Conhecer com maestria uma determinada tecnologia pode não ser suficiente
para definir um ótimo desenvolvedor de softwares nos dias atuais. Os conceitos
de <a href="http://www.manifestoagil.com.br/">agilidade</a> acabam por determinar comportamentos
esperados dos envolvidos na criação de softwares.
</p>

<p>As habilidades ou &ldquo;Soft Skills&rdquo; do profissional diferenciado no
mercado atual seriam:</p>

<h3 id="consciência">Consciência</h3>

<p>Saber no que você é bom e no que você não é. Isso é um diferencial nas equipes que tem foco em desenvolver softwares com qualidade, principalmente nos momentos em que é preciso definir quais serão suas atividades para a próxima entrega.</p>

<p>Se você possui um emprego que te permite fazer o que gosta e que te paga bem, tenha a consciência de que tem sorte. Vivemos em tempos que a demanda por programadores excede a oferta, mesmo assim, nem todos tem essa sorte.</p>

<h3 id="humildade">Humildade</h3>

<p>Estar aberto à possibilidade de estar errado é fundamental para fazer parte
de um time. Aprenda, melhore sempre e reconheça seus erros sempre que estes
aparecerem. Quanto menos as pessoas do time tiverem medo de estarem
erradas, mais confiantes elas serão.</p>

<p>Confie que as pessoas farão seu trabalho!</p>

<h3 id="empatia">Empatia</h3>

<p>Pratique isso com todos que você conhece e que interagem com seu trabalho. Entenda que a equipe de negócios e o seu time serão os maiores afetados pelas decisões que você tomar. Não é possível ter colaboração com o cliente sem se colocar no lugar dele, muito menos responder a mudanças de forma satisfatória.</p>

<p>Nunca assuma que sabe o motivo de uma decisão, a não ser que esteja na sala quando ela foi tomada.</p>

<h3 id="espirito-de-time">Espirito de Time</h3>

<p>Indivíduos e a interação entre eles são essenciais para entregar valor da melhor forma.
É importante saber que suas atividades vão impactar as pessoas ao seu redor e as suas entregas vão melhorar a vida de várias pessoas. Pessoas relacionadas a negócios e desenvolvedores devem trabalhar em conjunto e, diariamente, durante todo o curso do projeto.</p>

<p>Compartilhe o que sabe e o que aprendeu com as pessoas ao seu redor e sempre peça para que elas façam o mesmo com você. Lembre-se: o método mais eficiente de transmitir informações é através de uma conversa cara a cara.</p>

<p>Cuidado ao entrar em discussões do tipo A contra B. Raramente isso vale o tempo e, com certeza, não vai entregar valor. Ja comentei sobre isso em <a href="https://jmarcon.github.io/post/20160316-a-guerra-das-linguagens/">Guerra das Linguagens</a>.</p>

<h3 id="criatividade">Criatividade</h3>

<p>A tecnologia não para e muita coisa nova e interessante aparece todos os dias. Os profissionais devem considerar separar um tempo semanal para conhecer o que está surgindo na comunidade.</p>

<p>Se for até algum congresso ou conferência, não deixe de participar de, pelo menos, uma
palestra de uma tecnologia que você não domina. Conhecer outras abordagens e
soluções vai te ajudar a ser um desenvolvedor melhor.</p>

<h3 id="cuidadoso">Cuidadoso</h3>

<p>Seja cético com posições extremas. Normalmente quando conhecemos algum &lsquo;evangelista&rsquo;
nos deparamos com a solução para tudo.</p>

<p>Seja liberal ao aprender algo novo mas, seja conservador em realmente utilizar. Afinal,
qualquer tecnologia pode ser a melhor escolha dependendo da necessidade do projeto
e da capacidade do time.</p>

<p>Enfim, as melhores arquiteturas, requisitos e designs emergem de times
auto-organizáveis.</p>

<h3 id="lealdade-e-respeito-com-as-pessoas">Lealdade e respeito com as pessoas</h3>

<p>A lealdade com as pessoas é um valor importante na construção de um grupo de trabalho.
Não seja leal a marcas, empresas ou tecnologias. Quem vai sempre te apoiar é o
seu time.</p>

<p>O respeito entre todos é essencial para que as pessoas possam refletir e tomar descisões sobre como o time pode se tornar mais efetivo, se
ajustar e otimizar os comportamentos dos indivíduos para atingir os objetivos.</p>

<h1 id="valores">Valores</h1>

<p>Se para você os valores acima são óbvios, então é bem provável que você já os tenha
impregnados em seu dia a dia. Neste caso, tenha empatia para com aqueles que não
mantêm esses comportamentos e os apoie a evoluir.</p>

<p>Caso não seja seu caso, é um bom momento para revisar seus valores e pensar sobre
como serão suas atividades no futuro. O mundo está mudando, talvez seja hora de
mudar com ele.</p>
        ]]>
      </description>
    </item>
    
    <item>
      <title>Multitarefa e a motivação</title>
      <link>https://jmarcon.github.io/post/20160417-multitarefa-e-a-motivacao/</link>
      <pubDate>Sun, 17 Apr 2016 16:06:25 -0400</pubDate>
      <author>contato@julianomarcon.com.br (Juliano Marcon)</author>
      <guid>https://jmarcon.github.io/post/20160417-multitarefa-e-a-motivacao/</guid>
      <description>
        <![CDATA[<img src="https://jmarcon.github.io/images/post/tasks-min.jpg" alt="tasks-min.jpg" />
          <p>As exigências da globalização e da redução de custos das empresas estão criando um
foco cada vez maior na arte de fazer mais com menos. Isso está gerando a busca por
pessoas com a capacidade de fazer várias coisas ao mesmo tempo, o que é um desafio para as equipes de recursos humanos. Entretanto, será que isso está tornando as pessoas realmente mais produtivas?
</p>

<p><a href="https://www.theguardian.com/science/2015/jan/18/modern-world-bad-for-brain-daniel-j-levitin-organized-mind-information-overload">Nossos cérebros não foram feitos para ser multitarefa</a>. Seu design foi construído para focar em uma coisa de cada vez e bombardea-lo com vários tipos de informação apenas o torna mais lento.</p>

<p>Sabemos que as pessoas trabalham cada vez mais, mas devido à natureza das atividades,
o sentimento é de estar correndo em círculos, ou seja, muito esforço para poucos
resultados.</p>

<p>Dificilmente as múltiplas tarefas são percebidas como &ldquo;em andamento&rdquo;, pois não existe
tempo hábil para acompanhar o status de tanta informação. Assim, o sentimento
que prevalece é que não há entrega de valor.</p>

<p>Quanto mais esse sentimento aumenta, mais difícil será para manter as entregas em dia.</p>

<h3 id="mas-como-lidar-com-isso">Mas, como lidar com isso?</h3>

<p><img src="https://https://jmarcon.github.io/images/post/path-min.jpg" alt="Mono-vs-Multi"
class="img-responsive"
style="width:100%; max-width:150px; max-height:300px; float:left; padding:10px 20px 10px 0;"></p>

<p>No seu dia-a-dia é importante conseguir ordenar suas atividades por ordem de criticidade. Aqui, a definição do que é mais urgente deve ocorrer alinhada sua gestão ou com a necessidade dos clientes. Manter um relacionamento próximo com seu superior pode ajudar muito a organizar suas prioridades.</p>

<p>Para que seu cérebro entenda um trabalho como feito e você possa se auto-motivar. Todos os dias de manhã crie uma lista com 1 ou 2 conquistas, seguido de uma lista ordenada das atividades do dia.</p>

<p>Acompanhe a finalização das tarefas e comemore caso consiga atingir as conquistas
definidas para o dia. Essas conquistas devem ser atividades complexas ou que possuem a maior urgência.</p>

<p>Para ajudar a se organizar, use ferramentas de gestão de tempo e organização de tarefas:</p>

<ul>
<li><a href="https://pt.wikipedia.org/wiki/Getting_Things_Done">GTD</a></li>
<li><a href="http://pomodorotechnique.com/">Pomodoro</a></li>
<li><a href="https://pt.wikipedia.org/wiki/GUT">Matriz GUT</a></li>
</ul>

<h5 id="como-um-gestor-lida-com-tudo">Como um gestor lida com tudo?</h5>

<p>No papel de líder e gestor de uma equipe, é parte de seu trabalho manter todas as
pessoas sabendo quais são seus principais objetivos e o resultado que se espera delas.</p>

<p>Se você já é um profissional que alcançou sua posição de gestão entendendo como
priorizar suas atividades, ensine seu time a fazer o mesmo. Se esse não for seu caso,
pedir apoio ao seu time e tentar aprender com eles é a melhor opção. Não será possível acompanhar o rápido desenvolvimento das pessoas sem evoluir sobre gestão de tempo.</p>

<p>Existem alguns métodos e ferramentas para apoiar a gerir uma equipe.</p>

<ul>
<li><a href="https://en.wikipedia.org/wiki/Performance_indicator">KPI</a></li>
<li><a href="https://en.wikipedia.org/wiki/OKR">OKR</a></li>
<li><a href="https://endeavor.org.br/por-que-e-tao-dificil-dar-e-receber-feedback/">Feedback constante</a></li>
</ul>

<p>No mundo atual vai existir sempre muita coisa interessante a ser desenvolvida e
construída. Garanto que tudo será urgente e importante para o cliente. Assim,
não poderia ser mais verdadeira a citação abaixo:</p>

<blockquote>
<p>Algumas pessoas acham que foco significa dizer sim para a coisa em que você
irá se focar. Não é nada disso. Foco significa dizer <strong>não</strong> às centenas de outras
boas ideias que existem. Você precisa selecionar cuidadosamente.
<div class="reference">Steve Jobs</div></p>
</blockquote>

<p><div style="clear:both"/></p>
        ]]>
      </description>
    </item>
    
    <item>
      <title>TI Bimodal : Uma questão de respeito</title>
      <link>https://jmarcon.github.io/post/20160319-ti-bimodal-uma-questao-de-respeito/</link>
      <pubDate>Sat, 19 Mar 2016 17:18:14 -0500</pubDate>
      <author>contato@julianomarcon.com.br (Juliano Marcon)</author>
      <guid>https://jmarcon.github.io/post/20160319-ti-bimodal-uma-questao-de-respeito/</guid>
      <description>
        <![CDATA[<img src="https://jmarcon.github.io/images/post/sync.jpg" alt="sync.jpg" />
          <p>Agilidade é, com certeza, o termo mais citado quando o futuro é discutido em grandes empresas financeiras ou necessitando se reinventar no mundo da tecnologia.</p>

<p>A existência de um legado exige que as empresas foquem seus esforços em perfis distintos na gestão e investimento de seus recursos de tecnologia de informação.
</p>

<p>O Gartner define como:</p>

<blockquote>
<p>A TI Bimodal é a prática de gerenciar separadamente dois modos coerentes de entrega de TI, um focado na estabilidade e outro focado na agilidade. <strong>O Modo1</strong> é tradicional e sequencial enfatizando a segurança e a precisão. <strong>O Modo2</strong> é exploratório e não linear pensando sempre em velocidade e agilidade.
<div class="reference"><a href="http://http://www.gartner.com/it-glossary/bimodal/">Gartner</a></div></p>
</blockquote>

<p><br/></p>

<p>As grandes companhias estão aplicando o modelo ou estão seriamente inclinadas a tentar o modelo bimodal. Arrisco afirmar que esse modelo acaba sendo aplicado naturalmente e implicitamente ao iniciar o processo de contratação de pessoas com a cultura de agilidade e as inserindo dentro dos ambientes corporativos.</p>

<p>O desafio neste modelo não está seriamente em coexistir os processos e projetos nos dois modelos. O grande risco a ser gerenciado na aplicação de uma estratégia bimodal é tratar o conflito cultural entre os dois mundos.</p>

<p>As pessoas que estão investindo seu tempo e esforços em crescer dentro do Modo2 focando em inovação, exploração, velocidade e agilidade se vêem com a responsabilidade e cobrança em dar uma nova visão da empresa para o mercado de forma extremamente rápida, ou seja, ciclos de entregas rápidas e constantes.</p>

<p>Os profissionais que têm seu foco no Modo1 sempre preocupados com um processo seguro, alta qualidade e precisão das mudanças aplicadas sempre garantindo que a empresa esteja 100% disponível a seus clientes possuem ciclos mais longos de entrega.</p>

<p>Quando existe a interação entre os dois modelos é que as coisas complicam. Os objetivos dos profissionais são, em muitas vezes, excludentes. E, principalmente, as cobranças de metas e resultados também ocorrem de forma diferente.</p>

<p>Gerir o conflito de interesses é o principal desafio dentro do modelo bimodal e a forma de lidar com essas diferenças não deve ser através da separação das demandas e sim pelo respeito entre os times.</p>

<p>A movimentação para um modelo de inovação com equipes separadas pode aparentar uma preferência da empresa pela inovação diante da operação. Isso pode causar um impacto negativo nas pessoas que trabalham melhor no Modo1 e que escolheram se dedicar a isso.</p>

<p>Em algumas situações, as equipes mais ágeis do Modo2 podem ficar indignadas com a cadência mais lenta de entregas do Modo1 e acabam por forçar a evolução através do desrespeito dos limites entre os Modos de trabalho.</p>

<p>Quando uma oportunidade de mudança de um processo de um produto aparece diante das equipes no Modo1 parecendo algo simples e a equipe do Modo2 avalia as mudanças nos diversos processos que esta oportunidade pode causar e que os impactos nos sistemas podem levar a um ciclo mais longo de entrega. O sentimento de incapacidade de mudança do time do Modo1 aparece rapidamente.</p>

<p>Equipes do Modo1 devem ter autonomia para fazer as experimentações necessárias para encontrar novas formas e produtos, mas é de extrema importância que essa mesma equipe <strong>respeite</strong> a autonomia e</p>

<p>Ambas as partes devem respeitar seus pares em relação a evolução tecnológica da empresa e trabalharem juntos para construir um modelo de trabalho onde a negociação entre os times resulte em uma sincronização dos ciclos de entrega garantindo evolução contínua com grandes lançamentos em ciclos mais longos.</p>

<p><img src="https://jmarcon.github.io/images/post/bimodal.png" class="img-responsive" alt="Bimodal IT cycles" /></p>

<p>É essencial que os times do Modo2 se preparem para um mundo de <a href="https://pt.wikipedia.org/wiki/Internet_das_Coisas">objetos conectados na internet</a> a todo momento, a <a href="https://en.wikipedia.org/wiki/Social_media_measurement">monitoração da interação social</a> de seu cliente diante da marca, disponibilização de produtos e serviços em canais que nem mesmo existem atualmente, identificação e segurança do usuário no mundo digital, computação em nuvem e os possíveis concorrentes que esses modelos podem trazer (<a href="https://pt.wikipedia.org/wiki/Software_como_serviço">SaaS</a> e <a href="https://pt.wikipedia.org/wiki/Plataforma_como_serviço">PaaS</a>), etc.</p>

<p>São diversas coisas que não necessariamente impactam a disponibilização dos serviços essenciais da empresa e que podem dar visibilidade e velocidade para as empresas dentro dos cenários digitais do futuro.</p>

<p>E eles devem compreender e respeitar que os serviços que eles consomem são o coração da empresa e o coração não deve falhar.</p>
        ]]>
      </description>
    </item>
    
    <item>
      <title>Benefícios de Hackathons e DoJos internos</title>
      <link>https://jmarcon.github.io/post/20160312-beneficios-de-hackathons-dojos-internos/</link>
      <pubDate>Sat, 12 Mar 2016 15:42:00 -0300</pubDate>
      <author>contato@julianomarcon.com.br (Juliano Marcon)</author>
      <guid>https://jmarcon.github.io/post/20160312-beneficios-de-hackathons-dojos-internos/</guid>
      <description>
        <![CDATA[<img src="https://jmarcon.github.io/images/post/hackathon2.png" alt="hackathon2.png" />
          <p>Grandes empresas executam DoJos ou Hackathons sobre desenvolvimento para
identificar equipes e profissionais de alto nível para oferecer uma nova
oportunidade de participar de algo maior. Muitas vezes, a mesma empresa ignora
os benefícios de manter eventos como esse dentro da corporação.
</p>

<h3 id="pagar-as-promessas-de-eleição">Pagar as promessas de eleição</h3>

<p>Quando o objetivo dos eventos externos é alcançado, a empresa consegue contratar
ótimos profissionais e agregar valor com novas tecnologias. No entanto, quando
esses profissionais passam a fazer parte do dia a dia da corporação, percebem
que a diversão do evento não faz parte das atividades e que aquilo era apenas
uma promessa de eleição.</p>

<p>Executar eventos internamente demonstra consistência e continuidade nos valores
e que a empresa não quer apenas <strong>parecer</strong> cool, como isso é parte integrante da cultura organizacional.</p>

<h3 id="reconhecimento-do-conhecimento">Reconhecimento do conhecimento</h3>

<p>Colocar as melhores mentes técnicas para liderar reuniões como essa é parte do
reconhecimento por sua evolução e conhecimento. As premiações de Hackathons,
apesar de serem muitas vezes simbólicas, demonstram o quanto a empresa dá valor
ao conhecimento técnico e que a instituição entende o setor de desenvolvimento
de software como algo importante para o futuro e não apenas um commodity.</p>

<h3 id="motivação-para-inovação">Motivação para inovação</h3>

<p>O cotidiano das pessoas dentro das empresas é algo cheio de responsabilidades e
dificilmente sobra tempo para inovar.</p>

<p>Eventos como Hackathons separam tempo para que os funcionários possam pensar
<em>fora da caixa</em>, exercitar soluções diferentes para os mesmos problemas, criar
algo novo com conhecimento do todo e discutir sobre o que é mais produtivo para
a empresa.</p>

<p>O evento se torna um investimento em soluções mais rápidas no futuro.</p>

<h3 id="diversão-produtiva">Diversão produtiva</h3>

<p>Lógico que estes eventos tem como um dos pilares o divertimento. Mas ao final,
algo de concreto é apresentado e possivelmente poderá ser aproveitado como o
início de um novo produto ou, com poucas adaptações, um novo recurso pronto para
ser disponibilizado para seus clientes.</p>

<h3 id="juntos-somos-mais">Juntos somos mais</h3>

<p>Compartilhar um tempo divertido com pessoas com objetivos parecidos vai trazer
uma integração maior entre times e melhorar o clima organizacional. Não será
difícil perceber que as principais mudanças de comportamento das pessoas vão
ocorrer após estes eventos.</p>

<p>Eventos devem, inclusive, promover a integração entre pessoas de times
diferentes.</p>

<h3 id="a-prática-leva-a-perfeição">A prática leva a perfeição</h3>

<p>Por último e não menos importante, a manutenção de eventos como DoJos de
programação faz com que o compartilhamento do conhecimento gere a evolução do
padrão de desenvolvimento em conjunto com todos, uma consciência corporativa da
qualidade do código e boas praticas de desenvolvimento e, por consequência, o
aumento da qualidade dos projetos entregues.</p>
        ]]>
      </description>
    </item>
    
  </channel>
</rss>