<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Infraestrutura on JULIANO MARCON</title>
    <link>http://localhost:1313/tags/infraestrutura/index.xml</link>
    <description>RSS in Infraestrutura on JULIANO MARCON</description>
    <generator>Juliano Marcon</generator>
    <language>pt-br</language>
    <managingEditor>contato@julianomarcon.com.br (Juliano Marcon)</managingEditor>
    <webMaster>contato@julianomarcon.com.br (Juliano Marcon)</webMaster>
    <atom:link href="/tags/infraestrutura/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Node e Cassandra - Parte 1 : Ambiente</title>
      <link>http://localhost:1313/post/20160320-node-e-cassandra-parte1-ambiente/</link>
      <pubDate>Sun, 20 Mar 2016 17:19:02 -0500</pubDate>
      <author>contato@julianomarcon.com.br (Juliano Marcon)</author>
      <guid>http://localhost:1313/post/20160320-node-e-cassandra-parte1-ambiente/</guid>
      <description>
        <![CDATA[<img src="http://localhost:1313/images/post/docker.png" alt="docker.png" />
          <p>Este é o primeiro de três posts sobre como criar uma API utilizando o
<a href="https://nodejs.org">NodeJS</a> e o <a href="https://cassandra.apache.org">Apache Cassandra</a>.</p>

<p>Vejo uma grande parte dos textos falando sobre a dupla de NodeJS com o
<a href="https://www.mongodb.org">MongoDB</a>. Mas o Cassandra pode ser uma alternativa para
alguns tipos de aplicações que demandam outros níveis de acessos de escrita e
leitura.
</p>

<h3 id="instalando-o-ambiente">Instalando o ambiente.</h3>

<p>Primeiro, estou utilizando o OSX mas, provavelmente, você terá pouco trabalho
para adaptar o que vamos ter aqui para outros sistemas.</p>

<p>Para abstrair um pouco vamos utilizar o <a href="http://www.docker.com">Docker</a> e deixar
um pouco mais automático com o recurso &ldquo;docker-compose&rdquo;.</p>

<p>No OSX e no Windows, o pessoal do Docker adquiriu o
<a href="https://www.kitematic.com">Kitematic</a> que após instalado vai lhe fornecer
todos os requisitos necessários para criar nosso ambiente.</p>

<h4 id="preparando-os-arquivos">Preparando os arquivos</h4>

<p>Vamos começar simplesmente criando uma arvore de diretórios que vai nos apoiar
nesse projeto.</p>

<p>Crie a seguinte estrutura na sua maquina:</p>

<pre><code class="language-javascript">[cassandra_docker]
  [cassandra]
  [node]
    [api]
</code></pre>

<h4 id="criando-a-maquina-do-cassandra">Criando a maquina do Cassandra</h4>

<p>Dentro da pasta do cassandra vamos criar o arquivo de nome <strong>Dockerfile</strong> que vai
informar ao docker como criar a maquina.</p>

<pre><code class="language-ruby"># Partir do docker inicial do cassandra no DockerHub
FROM cassandra:latest
</code></pre>

<p>Bem simples!</p>

<h4 id="criando-a-maquina-do-nodejs">Criando a maquina do NodeJS</h4>

<p>Dentro da pasta node crie mais um arquivo com o node de <strong>Dockerfile</strong> para
configurar o docker que vai rodar o node.</p>

<pre><code class="language-ruby"># Partir do docker inicial do node do DockerHub
FROM node:latest

# Criar a pasta onde a aplicação vai rodar
RUN mkdir /api

# Definir a pasta criada como a pasta de trabalho
WORKDIR /api

# Executar a instalação das dependecias
ENTRYPOINT [&quot;/bin/bash&quot;, &quot;start.sh&quot;]
</code></pre>

<p>Os arquivos da aplicação serão criados durante o ultimo POST desta série. Mas vamos
deixar algo preparado aqui.</p>

<h4 id="configurando-a-composição">Configurando a composição</h4>

<p>Crie na pasta raiz (cassandra_docker) um arquivo com o nome &ldquo;docker-compose.yml&rdquo;
que vai receber a configuração detalhada de como o dockers vão ser criados e
como eles vão se conectar.</p>

<pre><code class="language-ruby">cassandra:
  build: ./cassandra
  expose:
    - &quot;27017&quot;
  ports:
  - &quot;7199:7199&quot;
  - &quot;7000:7000&quot;
  - &quot;7001:7001&quot;
  - &quot;9160:9160&quot;
  - &quot;9042:9042&quot;

nodejs:
  build: ./node
  volumes:
    - &quot;./node/api:/api&quot;
  expose:
    - &quot;3000&quot;
  ports:
    - &quot;3000:3000&quot;
  links:
    - &quot;cassandra:cassandra&quot;
</code></pre>

<h3 id="iniciando-as-maquinas">Iniciando as maquinas</h3>

<p>Execute o comando abaixo e aguarde a maquina do cassandra subir:</p>

<pre><code class="language-bash">docker-compose up -d cassandra
</code></pre>

<p>É possível iniciar o Kitematic e ver as maquinas criadas. Apenas a maquina do
cassandra estará rodando e estará acessível pelo endereço 192.168.99.100:27017 se
quiser utilizar uma GUI para acessar o banco.</p>

<blockquote>
<p>O IP <strong><em>192.168.99.100</em></strong> é atribuído para a maquina virtual (virtualbox) criada como
docker-machine pelo Kitematic.</p>
</blockquote>
        ]]>
      </description>
    </item>
    
  </channel>
</rss>