<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cliente on Juliano Marcon</title>
    <link>https://jmarcon.github.io/tags/cliente/</link>
    <description>RSS in Cliente on Juliano Marcon</description>
    <generator>Juliano Marcon</generator>
    <language>pt-br</language>
    <managingEditor>contato@julianomarcon.com.br (Juliano Marcon)</managingEditor>
    <webMaster>contato@julianomarcon.com.br (Juliano Marcon)</webMaster>
    <lastBuildDate>Sat, 16 Apr 2016 15:42:00 -0300</lastBuildDate>
    <atom:link href="https://jmarcon.github.io/tags/cliente/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>É tudo JavaScript</title>
      <link>https://jmarcon.github.io/post/20160416-e-tudo-javascript/</link>
      <pubDate>Sat, 16 Apr 2016 15:42:00 -0300</pubDate>
      <author>contato@julianomarcon.com.br (Juliano Marcon)</author>
      <guid>https://jmarcon.github.io/post/20160416-e-tudo-javascript/</guid>
      <description>
        

&lt;p&gt;Vejo que atualmente muito se fala sobre MEAN Stack. Em resumo é uma pilha de
tecnologias para desenvolvimento web baseada em JavaScript. Não pretendo discutir
se a linguagem é a melhor. Vou apresentar as vantagens e desvantagens de basear
todo o ambiente em uma única linguagem.&lt;/p&gt;

&lt;p&gt;Se seu foco é aprender sobre o MEAN, pode encontrar informações agrupadas em
&lt;a href=&#34;http://www.mean.io&#34;&gt;MEAN.IO&lt;/a&gt; ou em &lt;a href=&#34;https://www.meanjs.org&#34;&gt;MEAN.JS&lt;/a&gt;. Mas sugiro
que foque primeiro nas tecnologias em separado:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mongodb.org&#34;&gt;&lt;strong&gt;M&lt;/strong&gt;ongo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.expressjs.com&#34;&gt;&lt;strong&gt;E&lt;/strong&gt;xpress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.angularjs.org&#34;&gt;&lt;strong&gt;A&lt;/strong&gt;ngular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nodejs.org&#34;&gt;&lt;strong&gt;N&lt;/strong&gt;ode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Se sua situação atual está um passo antes, ou seja, decidindo SE vai utilizar
esse conjunto de recursos vou levantar alguns pontos que podem ser de seu interesse
para apoiar sua escolha.&lt;/p&gt;

&lt;h3 id=&#34;vantagens:dcbb73ac5f26f3360a06acfd8695c880&#34;&gt;Vantagens&lt;/h3&gt;

&lt;h4 id=&#34;a-linguagem-é-sempre-a-mesma:dcbb73ac5f26f3360a06acfd8695c880&#34;&gt;A linguagem é sempre a mesma&lt;/h4&gt;

&lt;p&gt;Ter um ambiente onde todos os sistemas falam a mesma língua ajuda que as pessoas
consigam discutir livremente sobre o que pode estar ocorrendo ou como criar uma
rotina da melhor forma.&lt;/p&gt;

&lt;p&gt;A análise da qualidade do código pode ser simplificada, programadores podem fazer
o &lt;strong&gt;code review&lt;/strong&gt; de outros mais facilmente, mais e mais pessoas terão a capacidade de
avaliar se o que está sendo produzido é feito da melhor forma.&lt;/p&gt;

&lt;h4 id=&#34;curva-de-aprendizagem:dcbb73ac5f26f3360a06acfd8695c880&#34;&gt;Curva de aprendizagem&lt;/h4&gt;

&lt;p&gt;A curva de aprendizagem entre os sistemas e tecnologias envolvidos é reduzida e as pessoas podem
evoluir mais rapidamente no conhecimento do código gerado e aumentar a produtividade.&lt;/p&gt;

&lt;p&gt;A comunidade pode apoiar facilmente os novos profissionais e uma maior quantidade
de cursos e treinamentos estão disponíveis para apoiar a evolução de um time em
formação.&lt;/p&gt;

&lt;h4 id=&#34;a-linguagem-é-bem-difundida:dcbb73ac5f26f3360a06acfd8695c880&#34;&gt;A linguagem é bem difundida&lt;/h4&gt;

&lt;p&gt;Se existe tecnologia em diversos meios com a mesma linguagem, é bem provável que
exista um maior numero de pessoas que a conheçam bem. Isso é um aliado forte no
momento de montar um time de desenvolvedores.&lt;/p&gt;

&lt;p&gt;Contratar novos profissionais quando o produto evoluir e crescer pode ser um
desafio. Saber que a tecnologia é amplamente conhecida facilita para as equipes
de recrutamento captar pessoas para o time em crescimento.&lt;/p&gt;

&lt;h4 id=&#34;existe-muita-coisa-pronta:dcbb73ac5f26f3360a06acfd8695c880&#34;&gt;Existe muita coisa pronta&lt;/h4&gt;

&lt;p&gt;Com a mesma linguagem, a quantidade de módulos e códigos prontos disponíveis nos
repositórios na internet aumenta significativamente a cada dia. Isso pode significar
um aumento de produtividade para iniciar seu projeto e mais velocidade nas entregas.&lt;/p&gt;

&lt;p&gt;O uso de repositórios como o &lt;a href=&#34;https://www.npmjs.com&#34;&gt;NPM&lt;/a&gt; torna simples utilizar novos
módulos nas aplicações.&lt;/p&gt;

&lt;div class=&#34;row&#34;&gt;
  &lt;div class=&#34;col-xs-2&#34;&gt;&lt;/div&gt;
  &lt;div class=&#34;col-xs-8 text-center&#34;&gt;
    &lt;img src=&#34;../../images/post/js_back_front_joke.jpg&#34; alt=&#34;Tudo javascript&#34;
    class=&#34;img-responsive&#34;
    style=&#34;width:100%; max-width:400px&#34;&gt;
  &lt;/div&gt;
  &lt;div class=&#34;col-xs-2&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;desvantagens:dcbb73ac5f26f3360a06acfd8695c880&#34;&gt;Desvantagens&lt;/h3&gt;

&lt;h4 id=&#34;a-linguagem-é-sempre-a-mesma-1:dcbb73ac5f26f3360a06acfd8695c880&#34;&gt;A linguagem é sempre a mesma&lt;/h4&gt;

&lt;p&gt;Você deve estar se perguntando: &amp;ldquo;Mas isso não é uma vantagem?&amp;rdquo;. Nesse caso, existem dois
lados da moeda. A falsa visão de que, por ser a mesma linguagem, a tecnologia é a mesma
pode causar um risco para os projetos.&lt;/p&gt;

&lt;p&gt;Afinal, um programador de aplicação &amp;ldquo;front-end&amp;rdquo; tem um foco de pensamento e raciocínio
diferente do programador de &amp;ldquo;back-end&amp;rdquo; que tem um foco diferente de como armazenar
informações e deveria ter apoio de conhecedores do banco de dados escolhido.&lt;/p&gt;

&lt;h4 id=&#34;a-linguagem-é-bem-difundida-e-existe-muita-coisa-pronta:dcbb73ac5f26f3360a06acfd8695c880&#34;&gt;A linguagem é bem difundida e existe muita coisa pronta&lt;/h4&gt;

&lt;p&gt;Agrupei essas duas vantagens para apresentar o risco que ambas podem gerar em um
projeto novo.&lt;/p&gt;

&lt;p&gt;A facilidade de encontrar conhecimento e módulos prontos gera o risco de contratar
pessoas que apenas sabem utilizar os recursos prontos e não tem conhecimento para
desenvolver a solução da melhor forma.&lt;/p&gt;

&lt;p&gt;Alguns profissionais criam aplicações &amp;ldquo;do zero&amp;rdquo; que, sem que eles escrevam realmente
uma linha de código voltada para o produto, possuem mais de 3500 arquivos.&lt;/p&gt;

&lt;p&gt;Ao invés de discorrer sobre o tema de forma aprofundada (pois sei que esse assunto
é polêmico). Segue duas referências interessantes para estudo que podem exemplificar
bem como isso pode estar afetando a comunidade.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.haneycodes.net/npm-left-pad-have-we-forgotten-how-to-program/&#34;&gt;NPM : Have we forgotten how to program?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/kA4-b7hvWhg&#34;&gt;Why Code in Node.js often gets Rejected by SoundCloud&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;dependência:dcbb73ac5f26f3360a06acfd8695c880&#34;&gt;Dependência&lt;/h4&gt;

&lt;p&gt;A escolha de uma pilha baseada na mesma linguagem normalmente inclui a utilização
de frameworks. Isso é natural, o MEAN é um caso desses, pois utiliza o Express.&lt;/p&gt;

&lt;p&gt;Os envolvidos no desenvolvimento do projeto acabam por ficar dependentes do uso
de determinados recursos e acabam restringindo o uso da tecnologia como um todo.
Muitas vezes estas restrições são agravadas quando novas versões do framework são
lançadas e a aplicação precisa de refactorings para utilizar o que é novo.&lt;/p&gt;

&lt;p&gt;A dependência pode ficar ainda mais evidente quando um framework para de ser
desenvolvido e as aplicações continuam a ser utilizadas. Mudanças futuras terão um
débito técnico que nunca poderão pagar sem reescrever todo o código.&lt;/p&gt;

&lt;h5 id=&#34;é-muita-coisa-para-um-único-profissional:dcbb73ac5f26f3360a06acfd8695c880&#34;&gt;É muita coisa para um único profissional&lt;/h5&gt;

&lt;div class=&#34;row&#34;&gt;
  &lt;div class=&#34;col-xs-2&#34;&gt;&lt;/div&gt;
  &lt;div class=&#34;col-xs-8 text-center&#34;&gt;
    &lt;img src=&#34;../../images/post/MEAN-Stack-Expertise.jpg&#34; alt=&#34;Não é pouca coisa&#34;
    class=&#34;img-responsive&#34;
    style=&#34;width:100%; max-width:400px&#34;&gt;
  &lt;/div&gt;
  &lt;div class=&#34;col-xs-2&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;conclusão:dcbb73ac5f26f3360a06acfd8695c880&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Considerando os pontos acima, acredito que utilizar recursos como o MEAN é vantajoso
principalmente para profissionais ou empresas que pretendem provar um conceito e que
após um resultado positivo se preparem para mitigar os riscos e construir não apenas
uma aplicação escalável mas formas de mitigar os riscos gerados por essa escolha
dentro de seus ambientes.&lt;/p&gt;

        &lt;![CDATA[
        <img src="https://jmarcon.github.io/images/post/meanjs.png" alt="meanjs.png" />
        ]]>
      </description>
    </item>
    
    <item>
      <title>A Guerra das linguagens</title>
      <link>https://jmarcon.github.io/post/20160316-a-guerra-das-linguagens/</link>
      <pubDate>Wed, 16 Mar 2016 15:42:00 -0300</pubDate>
      <author>contato@julianomarcon.com.br (Juliano Marcon)</author>
      <guid>https://jmarcon.github.io/post/20160316-a-guerra-das-linguagens/</guid>
      <description>
        

&lt;p&gt;Praticamente todos os dias vejo pessoas se digladiando sobre qual linguagem
preferem, que a sua escolha é a melhor e que as outras são mais fracas. Todos
tem ótimos argumentos do motivo pelo qual a sua escolha seria a escolha mais
evidente para todos. Esse posicionamento forte tem vantagens e desvantagens
quando se trata de um time de desenvolvimento.&lt;/p&gt;

&lt;h3 id=&#34;vantagens:b111f52da7a87d8d81eee532336c896d&#34;&gt;Vantagens&lt;/h3&gt;

&lt;h4 id=&#34;avaliação-de-pontos-fortes-e-fracos-de-cada-linguagem:b111f52da7a87d8d81eee532336c896d&#34;&gt;Avaliação de pontos fortes e fracos de cada linguagem&lt;/h4&gt;

&lt;p&gt;É evidente que estas discussões podem e vão evidenciar os diferenciais que
cada linguagem possui. Evangelistas de cada tecnologia acabam por expor um
comparativo detalhado baseado em dados e benchmarks.&lt;/p&gt;

&lt;p&gt;Isso permite ao time como um todo adquirir conhecimento extra sobre os temas.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Falar é uma necessidade, escutar é uma arte
&lt;div class=&#34;reference&#34;&gt;Johann Goethe&lt;/div&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h3 id=&#34;desvantagens:b111f52da7a87d8d81eee532336c896d&#34;&gt;Desvantagens&lt;/h3&gt;

&lt;h4 id=&#34;solução-em-segundo-plano:b111f52da7a87d8d81eee532336c896d&#34;&gt;Solução em segundo plano.&lt;/h4&gt;

&lt;p&gt;Normalmente a explanação dos evangelistas não está direcionada a solucionar um
problema ou identificar se suas vantagens são parte dos requisitos da solução
que está sendo avaliada.&lt;/p&gt;

&lt;p&gt;O time sempre tem que ter o foco de entregar um
software com qualidade, ou seja, a solução é mais importante que os gostos
pessoais envolvidos na solução.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h4 id=&#34;impactos-no-relacionamento-do-time:b111f52da7a87d8d81eee532336c896d&#34;&gt;Impactos no relacionamento do time.&lt;/h4&gt;

&lt;p&gt;É fato que quando existe uma discussão entre dois evangelistas de tecnologias
concorrentes o clima costuma não se manter em uma estrutura de diálogo. Os
ânimos se exaltam quando alguém percebe que, por algum motivo, o outro está
vencendo a disputa ou que seus argumentos não serão suficientes para convencer
a maior parte da equipe.&lt;/p&gt;

&lt;p&gt;O time fica dividido e o relacionamento entre as pessoas fica abalado. Na melhor
das hipóteses, o lado mais fraco ficará inibido em argumentar em um outro
momento ou ficará desestimulado em participar ativamente de definições futuras.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h4 id=&#34;olhos-fechados-para-o-novo:b111f52da7a87d8d81eee532336c896d&#34;&gt;Olhos fechados para o novo.&lt;/h4&gt;

&lt;p&gt;Nem sempre as discussões são sobre &lt;strong&gt;novas&lt;/strong&gt; tecnologias, na verdade, diversas
vezes a discussão ocorre envolvendo tecnologias já estabelecidas que já
adquiriram adeptos fortes. Isso só corrobora com a visão de que estas discussões
não geram um resultado final.&lt;/p&gt;

&lt;p&gt;O mundo de tecnologia possui cada vez mais novas tecnologias e frameworks
nascendo e morrendo em todas as linguagens de programação. Cada uma tentando
resolver um problema.&lt;/p&gt;

&lt;p&gt;Não é difícil entender que fixar a visão sobre a perspectiva técnica não vai
fomentar que as pessoas procurem por novas soluções para resolver os requisitos
do cliente e da solução.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;O progresso é impossível sem mudança; e aqueles que não conseguem mudar as
suas mentes não conseguem mudar nada.
&lt;div class=&#34;reference&#34;&gt;George Bernard Shaw&lt;/div&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h4 id=&#34;débito-técnico-antes-do-começo:b111f52da7a87d8d81eee532336c896d&#34;&gt;Débito técnico antes do começo.&lt;/h4&gt;

&lt;p&gt;Se o vencedor ganhar pela melhor argumentação sobre a superioridade técnica de
sua tecnologia sem olhar o que se espera da solução é fácil perceber que o
desenvolvimento vai iniciar já com débitos técnicos referentes à solução e é
ainda mais crítico quando percebemos que uma escolha equivocada no início vai
gerar grandes re-trabalhos ou ainda inviabilizar a entrega de valor.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h3 id=&#34;conclusão:b111f52da7a87d8d81eee532336c896d&#34;&gt;Conclusão&lt;/h3&gt;

&lt;p&gt;Ter uma opinião sobre uma tecnologia é algo de extrema importância para todo
profissional envolvido com o desenvolvimento de soluções mas, tão importante
quanto, é entender que os conceitos ágeis também se aplicam nesse momento e que
ter a mente aberta ao diferente é essencial para entregar software com
qualidade.&lt;/p&gt;

&lt;p&gt;Alguns líderes escolhem o caminho mais fácil tentando contratar um time inteiro
com a mesma &amp;ldquo;base&amp;rdquo; técnica. Se esse for o único ponto de apoio para a seleção do
time vai existir muito mais trabalho para implantar uma cultura ágil do que o
contrário (contratar um pensamento ágil e permitir que os bons técnicos evoluam
em novas tecnologias). Mas isso é assunto para outro post.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h3 id=&#34;quem-ganha-a-guerra:b111f52da7a87d8d81eee532336c896d&#34;&gt;Quem ganha a guerra?&lt;/h3&gt;

&lt;p&gt;Como sempre…  &lt;strong&gt;NINGUÉM&lt;/strong&gt;. Mas tenho certeza que existe um maior perdedor:&lt;/p&gt;

&lt;h1 id=&#34;span-nbsp-nbsp-nbsp-nbsp-span-o-cliente:b111f52da7a87d8d81eee532336c896d&#34;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt; &lt;strong&gt;O cliente!&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Lembre-se que:&lt;/em&gt;  &lt;strong&gt;Não existe panacéia tecnológica.&lt;/strong&gt;&lt;/p&gt;

        &lt;![CDATA[
        <img src="https://jmarcon.github.io/images/post/languages.png" alt="languages.png" />
        ]]>
      </description>
    </item>
    
  </channel>
</rss>
