<?xml version="1.0" encoding="utf-8" standalone="yes" ?>

<feed xmlns="http://www.w3.org/2005/Atom">
<title type="html"><![CDATA[Nosql on Juliano Marcon]]></title>
<link href="https://jmarcon.github.io/tags/nosql/index.xml" rel="self"/>
<link href="https://jmarcon.github.io/tags/nosql/"/>
<updated>2016-03-21T17:19:15-03:00</updated>
<id>https://jmarcon.github.io/tags/nosql/</id>
<author>
<name><![CDATA[ Juliano Marcon ]]></name>
<email><![CDATA[ contato@julianomarcon.com.br ]]></email>
</author>
<generator uri="http://gohugo.io/">Hugo</generator>

<entry>
<title type="html"><![CDATA[Node e Cassandra - Parte 2 : O mínimo do cassandra]]></title>
<link href="https://jmarcon.github.io/post/20160321-node-e-cassandra-parte2-o-minimo-do-cassandra/"/>
<updated>2016-03-21T17:19:15-03:00</updated>
<id>https://jmarcon.github.io/post/20160321-node-e-cassandra-parte2-o-minimo-do-cassandra/</id>
<category term="Software"/><category term="Node"/><category term="Cassandra"/>
<content type="html"><![CDATA[ <p>Este é o segundo de três posts sobre como criar uma API utilizando o
<a href="https://nodejs.org">NodeJS</a> e o <a href="https://cassandra.apache.org">Apache Cassandra</a>.</p>

<p>Não vou discutir qual é o banco mais indicado para seu projeto, deixo aqui alguns
benchmarks encontrados na internet para que você possa tomar a decisão.</p>

<ul>
<li><a href="http://www.planetcassandra.org/nosql-performance-benchmarks/">Planet Cassandra</a></li>
<li><a href="https://www.mongodb.com/blog/post/high-performance-benchmarking-mongodb-and-nosql-systems">MongoDB</a></li>
<li><a href="https://jaxenter.com/evaluating-nosql-performance-which-database-is-right-for-your-data-107481.html">JaxEnter</a></li>
</ul>

<p>Neste momento, vamos preparar nossa base para receber os dados de nossa API. Para
nosso exemplo apenas armazenaremos dados simples de email e senha. Apenas focado
em uma autenticação simples.</p>

<p>Com o Docker do Cassandra rodando como descrito no
<a href="../Node-e-Cassandra-Parte1-Ambiente">artigo anterior</a>, vamos agora nos conectar
na base de dados.</p>

<p>Se você criou as pastas como indicado, vamos iniciar o prompt do cassandra em uma
maquina docker temporária, execute o comando abaixo:</p>

<pre><code class="language-bash">docker run -it --link cassandranode_cassandra_1:cassandra --rm cassandra sh -c 'exec cqlsh &quot;$CASSANDRA_PORT_9042_TCP_ADDR&quot;'
</code></pre>

<p>O termo  <strong>cassandranode_cassandra_1</strong> encontrado no comando acima se refere
ao nome do Docker que esta rodando o cassandra no Kitematic.</p>

<p>Desta forma, deve ver o prompt do cassandra rodando no terminal:</p>

<pre><code class="language-bash">cqlsh&gt;
</code></pre>

<p>A primeira coisa que faremos é criar o Keyspace. O Keyspace do cassandra é como
se fosse o Schema do banco de dados. É nesse espaço que criaremos nossa tabela
depois.</p>

<p>Vamos criar o Keyspace:</p>

<pre><code class="language-bash">cqlsh&gt; CREATE KEYSPACE demo
   ... WITH REPLICATION = {
   ... 'class' : 'SimpleStrategy',
   ... 'replication_factor' : 1
   ... };
</code></pre>

<p>Os parâmetros passados para replicação não serão tratados aqui.</p>

<p>Verifique se o Keyspace foi criado:</p>

<pre><code class="language-bash">cqlsh&gt; DESC KEYSPACES;

demo   system_schema   system_auth   ...
</code></pre>

<p>Defina o Keyspace que vamos trabalhar agora.</p>

<pre><code class="language-bash">cqlsh&gt; USE demo;
</code></pre>

<p>E crie nossa tabela</p>

<pre><code class="language-bash">cqlsh:demo&gt; CREATE TABLE users (
        ... email text,
        ... password text,
        ... PRIMARY KEY (email)
        ... );
</code></pre>

<p>Criamos nossa tabela, para ver que tudo esta no banco execute o comando:</p>

<pre><code class="language-bash">cqlsh:demo&gt; DESC SCHEMA;
</code></pre>

<p>Desta forma deixamos nosso banco pronto para nosso exemplo de API em NodeJS
que será finalizado no próximo artigo.</p>
 ]]></content>
</entry>

</feed>