<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Débito Técnico on Juliano Marcon</title>
    <link>https://jmarcon.github.io/tags/d%C3%A9bito-t%C3%A9cnico/</link>
    <description>RSS in Débito Técnico on Juliano Marcon</description>
    <generator>Juliano Marcon</generator>
    <language>pt-br</language>
    <managingEditor>contato@julianomarcon.com.br (Juliano Marcon)</managingEditor>
    <webMaster>contato@julianomarcon.com.br (Juliano Marcon)</webMaster>
    <lastBuildDate>Sun, 24 Apr 2016 17:48:35 -0300</lastBuildDate>
    <atom:link href="https://jmarcon.github.io/tags/d%C3%A9bito-t%C3%A9cnico/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Sobre TDD e Refactoring</title>
      <link>https://jmarcon.github.io/post/20160420-sobre-refactoring/</link>
      <pubDate>Sun, 24 Apr 2016 17:48:35 -0500</pubDate>
      <author>contato@julianomarcon.com.br (Juliano Marcon)</author>
      <guid>https://jmarcon.github.io/post/20160420-sobre-refactoring/</guid>
      <description>
        <![CDATA[<img src="https://jmarcon.github.io/images/post/tdd.jpg" alt="tdd.jpg" />
          

<p>A preocupação diária com a qualidade dos código construídos nas empresas que desenvolvem software, próprios ou para terceiros, estão fomentando a prática de técnicas como o TDD.</p>

<p>Os times tem espaço para aprender e aplicar essa técnica? Será que as empresas realmente sabem o que significa isso?</p>

<h3 id="o-que-é-tdd:c4ad02df1cdf47bd76798d9b4f65673e">O que é TDD?</h3>

<p><a href="https://pt.wikipedia.org/wiki/Test_Driven_Development">Test Driven Development (TDD)</a>, ou em tradução livre, Desenvolvimento Orientado a Testes é uma metodologia com foco em converter as necessidades de negócios em testes computacionais para, em seguida, escrever um trecho de código que passe no teste e, finalmente, executar o Refactoring dos programas.</p>

<p>Busca-se um código de qualidade, funcionando e testado, através da repetição contínua do ciclo apresentado acima.</p>

<h3 id="o-que-é-refactoring:c4ad02df1cdf47bd76798d9b4f65673e">O que é Refactoring?</h3>

<p>É a prática de reescrever códigos sem alterar sua funcionalidade evoluindo suas características não funcionais. Executar de forma contínua pequenos procedimentos de refactoring produz uma reestruturação significativa no projeto.</p>

<p><img src="/images/post/qualidade.png" alt="Qualidade" style="max-width:200px; float:left; margin:10px;" /></p>

<p>O passo de Refactoring é o que garante a qualidade e performance do código escrito e, portanto, o procedimento mais impactado pelo triângulo da qualidade.</p>

<p>Durante o levantamento de projetos e seu planejamento, as principais informações que são avaliadas pelos stakeholders são os lados desse triângulo, e tentam ao máximo reduzir o custo e o tempo sempre tentando incluir o máximo de escopo.</p>

<p>Mesmo que a grande maioria dos gestores de projeto conheça essa tríplice, quando se trata de software, a espectativa deles é que a qualidade seja garantida pela equipe de desenvolvimento. Desta formar, a qualidade é a primeira que sofre impactos quando o cronograma precisa ser reduzido sem perder as funcionalidades pedidas pelo cliente.</p>

<p>Isso seria um comportamento aceitável em circunstâncias onde exista flexibilidade para rever o código posteriormente. Mas&hellip; Projetos devem ter começo e fim. A solução seria criar um novo projeto para resolver as falhas futuras, mas é difícil defender o lucro em um projeto assim. Tento apresentar uma sugestão para lidar com essa situação em <a href="https://jmarcon.github.io/post/20160424-o-debito-tecnico-das-empresas-projetizadas/">outro artigo</a>.</p>

<p>Ao final, considerado entregue, um produto sai da fila de prioridades da empresa e novos projetos começam a ser estudados.</p>

<h3 id="como-manter-a-qualidade:c4ad02df1cdf47bd76798d9b4f65673e">Como manter a qualidade?</h3>

<p>A janela da situação do projeto continuará sendo um cronograma, mas não apenas é possível apresentar as necessidades e os benefícios de investir na qualidade durante o desenvolvimento, como é simples demonstrar o valor agregado nessas ações.</p>

<h5 id="qualidade-faz-parte-do-escopo:c4ad02df1cdf47bd76798d9b4f65673e">Qualidade faz parte do escopo:</h5>

<p>Apesar de improvável, o levantamento inicial deveria considerar os requisitos não funcionais como parte do escopo e o tempo de refactoring necessário para garantir a qualidade do código.</p>

<p>Esses tempo deve ser defendido no projeto como risco operacional futuro e dependências para a continuidade do negócio.</p>

<p>Em times ágeis, a participação de um arquiteto e o auto aprendizado do time causa um senso de responsabilidade pelo produto que força as pessoas a considerar o refactoring no momento da definição do escopo das atividades.</p>

<h5 id="equipes-de-qualidade-que-entendem-do-código:c4ad02df1cdf47bd76798d9b4f65673e">Equipes de qualidade que entendem do código:</h5>

<p>Definir uma equipe de revisão de código constante e responsável pela arquitetura e requisitos não funcionais de cada projeto.</p>

<p>Essas equipes poderiam ser divididas por linha de negócios ou produto e deveriam não apenas fomentar os refactorings antes da entrega das funcionaldiades mas também acompanhar o desenvolvimento de perto.</p>

<p>É uma prática comum para escalar os times ágeis ter um time de arquitetura responsável por um conjunto de produtos e funcionalidades apoiando os times de desenvolvimento.</p>

<h5 id="definir-o-que-testar:c4ad02df1cdf47bd76798d9b4f65673e">Definir o que testar:</h5>

<p>Ter absolutamente tudo com testes é algo muito caro e, provavelmente, o custo envolvido supera os benefícios.</p>

<p>Um código 100% testado pode parecer um sonho para muitos desenvolvedores e entusiastas do TDD, mas é fato que para ter esse nível de qualidade, muito tempo e dinheiro devem ser investidos.</p>

<p>É preciso ponderar se os testes estão realmente agregando valor para a empresa, pois pode ocorrer que o custo de manutenção do teste supere os custos de manutenção do código.</p>

<p>Definir uma porcentagem de cobertura dos testes pode ajudar flexibilizar o esforço, mas isso pode impactar como as pessoas escrevem os testes e os desenvolvedores podem acabar focando em escrever os testes mais simples e deixar as rotinas mais complexas descobertas. Isso é o oposto de agregar valor.</p>

<p>Portanto, neste caso, o time deve ser guiado e evoluir para conseguir criar uma consciência comum sobre a relevância do teste, a visão da equipe de negócios sobre a funcionalidade e a percepção dos programas que possuem dependências de outros trechos de código e que podem ser impactados facilmente por alterações futuras.</p>

<h5 id="acompanhe:c4ad02df1cdf47bd76798d9b4f65673e">Acompanhe:</h5>

<p>Use algumas métricas para acompanhar a evolução da qualidade de seu código, como a quantidade de defeitos encontrados após a entrega, a melhora da velocidade da aplicação ou a diminuição das reclamações dos clientes.</p>

        ]]>
      </description>
    </item>
    
    <item>
      <title>O Débito Técnico das Empresas Projetizadas</title>
      <link>https://jmarcon.github.io/post/20160424-o-debito-tecnico-das-empresas-projetizadas/</link>
      <pubDate>Sun, 24 Apr 2016 11:36:41 -1100</pubDate>
      <author>contato@julianomarcon.com.br (Juliano Marcon)</author>
      <guid>https://jmarcon.github.io/post/20160424-o-debito-tecnico-das-empresas-projetizadas/</guid>
      <description>
        <![CDATA[<img src="https://jmarcon.github.io/images/post/debito_tecnico.jpg" alt="debito_tecnico.jpg" />
          

<p>Durante o desenvolvimento de qualquer projeto, atalhos são tomados. O motivo? Vamos fazê-lo para entregar mais rápido. Só dessa vez.</p>

<p>O débito técnico se acumula e, pouco a pouco, o código do produto é corrompido. Ninguém vai se importar com isso por muito tempo, mas, eventualmente alguém terá que se lidar com isso e, provavelmente, será você.</p>

<p>Isso é algo que ocorre em todo projeto e a concorrência faz a mesma coisa para lançar novos recursos mais rápido.</p>

<p>Sabendo disso, como pagar os débitos? O primeiro passo é: Torne os problemas visíveis. Como?</p>

<h2 id="monitore-monitore-e-monitore:4277337ea97f59e2fa778103de7b31fc">Monitore, monitore e monitore</h2>

<p>Compartilhe a informação dos problemas enfrentados por sua aplicação, performance, hardware, bugs e erros com a empresa. Se possível, com o cliente.</p>

<p>Os mais conservadores dirão: &ldquo;Minha nossa! Mas assim os stakeholders vão ver que temos problemas!&rdquo;. <strong>Exato!</strong> O investimento em projetos com foco em entrega da melhoria dos ambientes e evolução de código sem criar funcionalidades precisam de um motivador e apoio dos que aprovam os esforços dos times.</p>

<p>Lógico que não deve existir dúvidas que foi feito o melhor para entregar os resulados mais rapidamente durante os projetos mas que o investimento em qualidade é essencial para a continuidade do negócio.</p>

<p>A monitoração vai proporcionar um conjunto de dados que vai sensibilizar a todos sobre quais pontos são mais críticos. Contra dados não há argumentos.</p>

<p>Aprove o projeto com foco em resolver o que dói mais para a empresa e para os clientes. As informações obtidas da supervisão constante das informações de comportamento das aplicações permitem escolher o escopo do projeto com foco na entrega de maior valor para seu cliente.</p>

<h2 id="trabalhe-os-valores-da-equipe:4277337ea97f59e2fa778103de7b31fc">Trabalhe os valores da equipe</h2>

<p>O código dos produtos é um bem valioso para a empresa. Mas são as pessoas que os constroem e modificam. Elas são seu bem mais precioso e seus valores vão ditar a qualidade com que os produtos serão tratados. A qualidade se origina dos valores.</p>

<h4 id="você-precisa-se-importar:4277337ea97f59e2fa778103de7b31fc">Você precisa se importar</h4>

<p>Não faz sentido querer que as pessoas se importem com a qualidade do código se você não se importar. O exemplo é o maior motivador.</p>

<p>O foco em resultado muitas vezes ofusca o valor da qualidade do código.</p>

<h4 id="seu-time-precisa-se-importar:4277337ea97f59e2fa778103de7b31fc">Seu time precisa se importar</h4>

<p>As pessoas que trabalham com o código dos produtos tem que enxergar o valor agregado que estão entregando. Cada novo produto, modificação ou funcionalidade vai gerar impacto na vida de diversas pessoas.</p>

<p>Mesmo que eles tenham a dificuldade de enxergar valor na entrega, a qualidade do código vai impactar diretamente seus companheiros de equipe, os futuros funcionários e toda a cadeia de trabalho de software.</p>

<h4 id="disciplina-é-a-essência:4277337ea97f59e2fa778103de7b31fc">Disciplina é a essência</h4>

<p>Uma vez que você (ou alguém do seu time) comece procrastinar sobre a qualidade, será muito difícil parar de deixar as coisas de lado. É um cuidado constante de todos.</p>

<h4 id="ritmo-constante:4277337ea97f59e2fa778103de7b31fc">Ritmo constante</h4>

<p>Lembre-se do ditado: <em>o ótimo é inimigo do bom</em>. Progredir na qualidade é mais importante do que atingir a perfeição.</p>

<h4 id="pequenas-vitórias-são-importantes:4277337ea97f59e2fa778103de7b31fc">Pequenas vitórias são importantes</h4>

<p>Quando o time começar a produzir partes de código realmente bons, isso vai induzir a melhorar as outras partes também. Uma conquista leva até outra e, consequentemente, gera tração.</p>

<h2 id="mostre-resultado:4277337ea97f59e2fa778103de7b31fc">Mostre resultado</h2>

<p>Utilize os dados de monitoração com antes e depois de cada evento importante para o produto, como o lançamento de novas funcionalidades, uma ação de marketing ou a implantação de suas melhorias de qualidade.</p>

<p>Compartilhe com todos as vitórias e tente fomentar ações de <a href="https://jmarcon.github.io/post/20160420-sobre-refactoring/">refactoring</a> durante o desenvolvimento do software. Os projetos específicos de qualidade não vão desaparecer, mas vão diminuir com o tempo.</p>

        ]]>
      </description>
    </item>
    
  </channel>
</rss>