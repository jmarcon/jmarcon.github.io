<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cassandra on Juliano Marcon</title>
    <link>https://jmarcon.github.io/categories/cassandra/</link>
    <description>RSS in Cassandra on Juliano Marcon</description>
    <generator>Juliano Marcon</generator>
    <language>pt-br</language>
    <managingEditor>contato@julianomarcon.com.br (Juliano Marcon)</managingEditor>
    <webMaster>contato@julianomarcon.com.br (Juliano Marcon)</webMaster>
    <lastBuildDate>Tue, 22 Mar 2016 17:19:31 -0300</lastBuildDate>
    <atom:link href="https://jmarcon.github.io/categories/cassandra/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Node e Cassandra - Parte 3 : Criando uma API Simples</title>
      <link>https://jmarcon.github.io/post/20160322-node-e-cassandra-parte3-criando-uma-api-simples/</link>
      <pubDate>Tue, 22 Mar 2016 17:19:31 -0500</pubDate>
      <author>contato@julianomarcon.com.br (Juliano Marcon)</author>
      <guid>https://jmarcon.github.io/post/20160322-node-e-cassandra-parte3-criando-uma-api-simples/</guid>
      <description>
        <![CDATA[
          <img src="https://jmarcon.github.io/images/post/nodejs.jpg" alt="nodejs.jpg" />
          <p>Este é o terceiro e último de três posts sobre como criar uma API utilizando o
<a href="https://nodejs.org">NodeJS</a> e o <a href="https://cassandra.apache.org">Apache Cassandra</a>.</p>

<p>Nos posts anteriores deixamos o ambiente parcialmente preparado e criamos a
base de dados que usaremos no cassandra.</p>

<p>Então vamos criar a aplicação dentro da pasta</p>

<blockquote>
<p><strong>cassandra_node &gt; node &gt; api</strong></p>
</blockquote>

<p>Vamos criar nosso arquivo <strong>package.json</strong> que definirá nossa aplicação e suas
dependências com o seguinte conteúdo.</p>

<pre><code class="language-javascript">{
  &quot;name&quot; : &quot;node-api-demo&quot;,
  &quot;main&quot; : &quot;server.js&quot;,
  &quot;dependencies&quot; : {
    &quot;express&quot; : &quot;~4.9.0&quot;,
    &quot;body-parser&quot; : &quot;~1.8.1&quot;,
    &quot;async&quot; : &quot;1.5.2&quot;,
    &quot;cassandra-driver&quot; : &quot;~3.0.1&quot;
  }
}
</code></pre>

<p>Inicie um arquivo <strong>server.js</strong> e insira o conteúdo abaixo:</p>

<pre><code class="language-javascript">var cassandra  = require('cassandra-driver');
var express    = require('express');
var app        = express();
var bodyParser = require('body-parser');

// Configurar o App para usar o body-parser
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

// Definindo a porta padrão (Lembre do docker-compose.yml)
var port = process.env.PORT || 3000;

// Criando nosso cliente de conexão.
var client = new cassandra.Client({
  contactPoints: ['192.168.99.100'],
  keyspace: 'demo'
});

// Conectando no banco de dados
client.connect(function(err) {
  console.log(err);
});


// Definindo a rotas para nossa API
var router = express.Router();

router.get('/', function(req, res) {
  res.json({ message: 'Wohooo!!! Bem vindo a nossa API' });
});

router.post('/login', function(req, res) {
  var email = req.body.email;
  var pass = req.body.password;

  client.execute(
    &quot;SELECT email, password FROM users &quot; +
    &quot;WHERE email = '&quot; + email + &quot;'&quot;,
    function(err, result) {
      if (err)
        res.send(err);

      var user = result.rows[0];
      if (user == null) {
        res.json({ message: 'Usuário ou senha inválidos ' });
      }
      else if (user.password != pass) {
        //Se tentar executar um WHERE diretamente no Cassandra ele apresentará
        //um erro. Não criamos um índice para a coluna password.
        res.json({ message: 'Usuário ou senha inválidos ' });
      }
      else {
        res.json({ message: user.email });
      }
    });
});

router.post('/register', function(req, res) {
  var email = req.body.email;
  var pass = req.body.password;
  var params = [email, pass];

  client.execute(
    &quot;INSERT INTO users (email, password) values (?, ?)&quot;, params, function(err) {
      if (err)
        res.send(err);

      res.json({ message: &quot;Cadastrado com sucesso!&quot; });
    }
  );
});

router.get('/first', function(req, res) {
  client.execute(
    &quot;SELECT email, password FROM users LIMIT 1&quot;,
    function(err, result) {
      if (err)
        res.send(err);

      var user = result.rows[0];
      if (user == null) {
        res.json({ message: 'Nenhum encontrado ' });
      } else {
        res.json({ message: user.email });
      }
    });
});

//Registrar nossas rotas com um prefixo api
app.use('/api', router);


//Iniciando o servidor
app.listen(port);

console.log('A Mágica acontece na porta ' + port);

</code></pre>

<p>Para que a aplicação node seja iniciada, vamos criar o arquivo <strong>start.sh</strong> na pasta
api (junto com o <em>server.js</em>) com o conteúdo abaixo:</p>

<pre><code class="language-bash">#!\bin\bash

#Instalar as dependências
npm install

#Iniciar a aplicação pelo packages.json
npm start
</code></pre>

<p>Assim, vamos iniciar também nossa maquina docker com o comando:</p>

<pre><code class="language-bash">docker-compose up -d nodejs
</code></pre>

<p>Utilize um utilitário como o <a href="https://www.getpostman.com/">Postman</a> ou o
<a href="http://www.telerik.com/fiddler">Fiddler</a> para fazer chamadas na sua API nos
endereços:</p>

<ul>
<li><a href="http://192.168.99.100:3000/api/">http://192.168.99.100:3000/api/</a> (GET)</li>
<li><a href="http://192.168.99.100:3000/api/first">http://192.168.99.100:3000/api/first</a> (GET)</li>
<li><a href="http://192.168.99.100:3000/api/register">http://192.168.99.100:3000/api/register</a> (POST)</li>
<li><a href="http://192.168.99.100:3000/api/login">http://192.168.99.100:3000/api/login</a> (POST)</li>
</ul>

        ]]>
      </description>
    </item>
    
    <item>
      <title>Node e Cassandra - Parte 2 : O mínimo do cassandra</title>
      <link>https://jmarcon.github.io/post/20160321-node-e-cassandra-parte2-o-minimo-do-cassandra/</link>
      <pubDate>Mon, 21 Mar 2016 17:19:15 -0500</pubDate>
      <author>contato@julianomarcon.com.br (Juliano Marcon)</author>
      <guid>https://jmarcon.github.io/post/20160321-node-e-cassandra-parte2-o-minimo-do-cassandra/</guid>
      <description>
        <![CDATA[
          <img src="https://jmarcon.github.io/images/post/cassandra.png" alt="cassandra.png" />
          <p>Este é o segundo de três posts sobre como criar uma API utilizando o
<a href="https://nodejs.org">NodeJS</a> e o <a href="https://cassandra.apache.org">Apache Cassandra</a>.</p>

<p>Não vou discutir qual é o banco mais indicado para seu projeto, deixo aqui alguns
benchmarks encontrados na internet para que você possa tomar a decisão.</p>

<ul>
<li><a href="http://www.planetcassandra.org/nosql-performance-benchmarks/">Planet Cassandra</a></li>
<li><a href="https://www.mongodb.com/blog/post/high-performance-benchmarking-mongodb-and-nosql-systems">MongoDB</a></li>
<li><a href="https://jaxenter.com/evaluating-nosql-performance-which-database-is-right-for-your-data-107481.html">JaxEnter</a></li>
</ul>

<p>Neste momento, vamos preparar nossa base para receber os dados de nossa API. Para
nosso exemplo apenas armazenaremos dados simples de email e senha. Apenas focado
em uma autenticação simples.</p>

<p>Com o Docker do Cassandra rodando como descrito no
<a href="../Node-e-Cassandra-Parte1-Ambiente">artigo anterior</a>, vamos agora nos conectar
na base de dados.</p>

<p>Se você criou as pastas como indicado, vamos iniciar o prompt do cassandra em uma
maquina docker temporária, execute o comando abaixo:</p>

<pre><code class="language-bash">docker run -it --link cassandranode_cassandra_1:cassandra --rm cassandra sh -c 'exec cqlsh &quot;$CASSANDRA_PORT_9042_TCP_ADDR&quot;'
</code></pre>

<p>O termo  <strong>cassandranode_cassandra_1</strong> encontrado no comando acima se refere
ao nome do Docker que esta rodando o cassandra no Kitematic.</p>

<p>Desta forma, deve ver o prompt do cassandra rodando no terminal:</p>

<pre><code class="language-bash">cqlsh&gt;
</code></pre>

<p>A primeira coisa que faremos é criar o Keyspace. O Keyspace do cassandra é como
se fosse o Schema do banco de dados. É nesse espaço que criaremos nossa tabela
depois.</p>

<p>Vamos criar o Keyspace:</p>

<pre><code class="language-bash">cqlsh&gt; CREATE KEYSPACE demo
   ... WITH REPLICATION = {
   ... 'class' : 'SimpleStrategy',
   ... 'replication_factor' : 1
   ... };
</code></pre>

<p>Os parâmetros passados para replicação não serão tratados aqui.</p>

<p>Verifique se o Keyspace foi criado:</p>

<pre><code class="language-bash">cqlsh&gt; DESC KEYSPACES;

demo   system_schema   system_auth   ...
</code></pre>

<p>Defina o Keyspace que vamos trabalhar agora.</p>

<pre><code class="language-bash">cqlsh&gt; USE demo;
</code></pre>

<p>E crie nossa tabela</p>

<pre><code class="language-bash">cqlsh:demo&gt; CREATE TABLE users (
        ... email text,
        ... password text,
        ... PRIMARY KEY (email)
        ... );
</code></pre>

<p>Criamos nossa tabela, para ver que tudo esta no banco execute o comando:</p>

<pre><code class="language-bash">cqlsh:demo&gt; DESC SCHEMA;
</code></pre>

<p>Desta forma deixamos nosso banco pronto para nosso exemplo de API em NodeJS
que será finalizado no próximo artigo.</p>

        ]]>
      </description>
    </item>
    
    <item>
      <title>Node e Cassandra - Parte 1 : Ambiente</title>
      <link>https://jmarcon.github.io/post/20160320-node-e-cassandra-parte1-ambiente/</link>
      <pubDate>Sun, 20 Mar 2016 17:19:02 -0500</pubDate>
      <author>contato@julianomarcon.com.br (Juliano Marcon)</author>
      <guid>https://jmarcon.github.io/post/20160320-node-e-cassandra-parte1-ambiente/</guid>
      <description>
        <![CDATA[
          <img src="https://jmarcon.github.io/images/post/docker.png" alt="docker.png" />
          

<p>Este é o primeiro de três posts sobre como criar uma API utilizando o
<a href="https://nodejs.org">NodeJS</a> e o <a href="https://cassandra.apache.org">Apache Cassandra</a>.</p>

<p>Vejo uma grande parte dos textos falando sobre a dupla de NodeJS com o
<a href="https://www.mongodb.org">MongoDB</a>. Mas o Cassandra pode ser uma alternativa para
alguns tipos de aplicações que demandam outros níveis de acessos de escrita e
leitura.</p>

<h3 id="instalando-o-ambiente:2d07405689eed99118c9470fa868ed61">Instalando o ambiente.</h3>

<p>Primeiro, estou utilizando o OSX mas, provavelmente, você terá pouco trabalho
para adaptar o que vamos ter aqui para outros sistemas.</p>

<p>Para abstrair um pouco vamos utilizar o <a href="http://www.docker.com">Docker</a> e deixar
um pouco mais automático com o recurso &ldquo;docker-compose&rdquo;.</p>

<p>No OSX e no Windows, o pessoal do Docker adquiriu o
<a href="https://www.kitematic.com">Kitematic</a> que após instalado vai lhe fornecer
todos os requisitos necessários para criar nosso ambiente.</p>

<h4 id="preparando-os-arquivos:2d07405689eed99118c9470fa868ed61">Preparando os arquivos</h4>

<p>Vamos começar simplesmente criando uma arvore de diretórios que vai nos apoiar
nesse projeto.</p>

<p>Crie a seguinte estrutura na sua maquina:</p>

<pre><code class="language-javascript">[cassandra_docker]
  [cassandra]
  [node]
    [api]
</code></pre>

<h4 id="criando-a-maquina-do-cassandra:2d07405689eed99118c9470fa868ed61">Criando a maquina do Cassandra</h4>

<p>Dentro da pasta do cassandra vamos criar o arquivo de nome <strong>Dockerfile</strong> que vai
informar ao docker como criar a maquina.</p>

<pre><code class="language-ruby"># Partir do docker inicial do cassandra no DockerHub
FROM cassandra:latest
</code></pre>

<p>Bem simples!</p>

<h4 id="criando-a-maquina-do-nodejs:2d07405689eed99118c9470fa868ed61">Criando a maquina do NodeJS</h4>

<p>Dentro da pasta node crie mais um arquivo com o node de <strong>Dockerfile</strong> para
configurar o docker que vai rodar o node.</p>

<pre><code class="language-ruby"># Partir do docker inicial do node do DockerHub
FROM node:latest

# Criar a pasta onde a aplicação vai rodar
RUN mkdir /api

# Definir a pasta criada como a pasta de trabalho
WORKDIR /api

# Executar a instalação das dependecias
ENTRYPOINT [&quot;/bin/bash&quot;, &quot;start.sh&quot;]
</code></pre>

<p>Os arquivos da aplicação serão criados durante o ultimo POST desta série. Mas vamos
deixar algo preparado aqui.</p>

<h4 id="configurando-a-composição:2d07405689eed99118c9470fa868ed61">Configurando a composição</h4>

<p>Crie na pasta raiz (cassandra_docker) um arquivo com o nome &ldquo;docker-compose.yml&rdquo;
que vai receber a configuração detalhada de como o dockers vão ser criados e
como eles vão se conectar.</p>

<pre><code class="language-ruby">cassandra:
  build: ./cassandra
  expose:
    - &quot;27017&quot;
  ports:
  - &quot;7199:7199&quot;
  - &quot;7000:7000&quot;
  - &quot;7001:7001&quot;
  - &quot;9160:9160&quot;
  - &quot;9042:9042&quot;

nodejs:
  build: ./node
  volumes:
    - &quot;./node/api:/api&quot;
  expose:
    - &quot;3000&quot;
  ports:
    - &quot;3000:3000&quot;
  links:
    - &quot;cassandra:cassandra&quot;
</code></pre>

<h3 id="iniciando-as-maquinas:2d07405689eed99118c9470fa868ed61">Iniciando as maquinas</h3>

<p>Execute o comando abaixo e aguarde a maquina do cassandra subir:</p>

<pre><code class="language-bash">docker-compose up -d cassandra
</code></pre>

<p>É possível iniciar o Kitematic e ver as maquinas criadas. Apenas a maquina do
cassandra estará rodando e estará acessível pelo endereço 192.168.99.100:27017 se
quiser utilizar uma GUI para acessar o banco.</p>

<blockquote>
<p>O IP <strong><em>192.168.99.100</em></strong> é atribuído para a maquina virtual (virtualbox) criada como
docker-machine pelo Kitematic.</p>
</blockquote>

        ]]>
      </description>
    </item>
    
  </channel>
</rss>
